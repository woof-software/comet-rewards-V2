schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type AbsorbCollateralInteraction {
  """
  Transaction ID + event log index
  """
  id: Bytes!
  """
  Transaction this interaction is part of
  """
  transaction: Transaction!
  """
  Market the interaction is with
  """
  market: Market!
  """
  Position the interaction is with
  """
  position: Position!
  """
  Address that triggered the collateral absorb
  """
  absorber: Bytes!
  """
  Collateral asset being absorbed
  """
  asset: CollateralToken!
  """
  Amount of collateral absorbed
  """
  amount: BigInt!
  """
  Amount of collateral absorbed in USD
  """
  amountUsd: BigDecimal!
}

input AbsorbCollateralInteraction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  absorber: Bytes
  absorber_not: Bytes
  absorber_in: [Bytes!]
  absorber_not_in: [Bytes!]
  absorber_contains: Bytes
  absorber_not_contains: Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: CollateralToken_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigDecimal
  amountUsd_not: BigDecimal
  amountUsd_gt: BigDecimal
  amountUsd_lt: BigDecimal
  amountUsd_gte: BigDecimal
  amountUsd_lte: BigDecimal
  amountUsd_in: [BigDecimal!]
  amountUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum AbsorbCollateralInteraction_orderBy {
  id
  transaction
  market
  position
  absorber
  asset
  amount
  amountUsd
}

type AbsorbDebtInteraction {
  """
  Transaction ID + event log index
  """
  id: Bytes!
  """
  Transaction this interaction is part of
  """
  transaction: Transaction!
  """
  Market the interaction is with
  """
  market: Market!
  """
  Position the interaction is with
  """
  position: Position!
  """
  Address that triggered the absorb
  """
  absorber: Bytes!
  """
  Asset being absorbed by the market
  """
  asset: BaseToken!
  """
  Amount of debt being absorbed
  """
  amount: BigInt!
  """
  Amount of debt being absorbed in USD
  """
  amountUsd: BigDecimal!
}

input AbsorbDebtInteraction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  absorber: Bytes
  absorber_not: Bytes
  absorber_in: [Bytes!]
  absorber_not_in: [Bytes!]
  absorber_contains: Bytes
  absorber_not_contains: Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: BaseToken_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigDecimal
  amountUsd_not: BigDecimal
  amountUsd_gt: BigDecimal
  amountUsd_lt: BigDecimal
  amountUsd_gte: BigDecimal
  amountUsd_lte: BigDecimal
  amountUsd_in: [BigDecimal!]
  amountUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum AbsorbDebtInteraction_orderBy {
  id
  transaction
  market
  position
  absorber
  asset
  amount
  amountUsd
}

type Account {
  """
  Address
  """
  id: Bytes!
  """
  Block number this account was created
  """
  creationBlockNumber: BigInt!
  """
  Address of the account
  """
  address: Bytes!
  """
  All positions of the account
  """
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
  ): [Position!]!
  """
  All reward claim interactions of the account
  """
  rewardsClaimed(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimRewardsInteraction_orderBy
    orderDirection: OrderDirection
    where: ClaimRewardsInteraction_filter
  ): [ClaimRewardsInteraction!]!
}

input Account_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  creationBlockNumber: BigInt
  creationBlockNumber_not: BigInt
  creationBlockNumber_gt: BigInt
  creationBlockNumber_lt: BigInt
  creationBlockNumber_gte: BigInt
  creationBlockNumber_lte: BigInt
  creationBlockNumber_in: [BigInt!]
  creationBlockNumber_not_in: [BigInt!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  positions_: Position_filter
  rewardsClaimed_: ClaimRewardsInteraction_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum Account_orderBy {
  id
  creationBlockNumber
  address
  positions
  rewardsClaimed
}

type BaseToken {
  """
  market ID + token ID
  """
  id: Bytes!
  """
  Block the base token was created
  """
  creationBlockNumber: BigInt!
  """
  Market the base token belongs to
  """
  market: Market!
  """
  Actual token
  """
  token: Token!
  """
  Last block that the base token config was updated
  """
  lastConfigUpdateBlockNumber: BigInt!
  """
  Price feed for the base token
  """
  priceFeed: Bytes!
  """
  Last token price in USD from the priceFeed
  """
  lastPriceUsd: BigDecimal!
  """
  Block of the last token price update
  """
  lastPriceBlockNumber: BigInt!
}

input BaseToken_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  creationBlockNumber: BigInt
  creationBlockNumber_not: BigInt
  creationBlockNumber_gt: BigInt
  creationBlockNumber_lt: BigInt
  creationBlockNumber_gte: BigInt
  creationBlockNumber_lte: BigInt
  creationBlockNumber_in: [BigInt!]
  creationBlockNumber_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  lastConfigUpdateBlockNumber: BigInt
  lastConfigUpdateBlockNumber_not: BigInt
  lastConfigUpdateBlockNumber_gt: BigInt
  lastConfigUpdateBlockNumber_lt: BigInt
  lastConfigUpdateBlockNumber_gte: BigInt
  lastConfigUpdateBlockNumber_lte: BigInt
  lastConfigUpdateBlockNumber_in: [BigInt!]
  lastConfigUpdateBlockNumber_not_in: [BigInt!]
  priceFeed: Bytes
  priceFeed_not: Bytes
  priceFeed_in: [Bytes!]
  priceFeed_not_in: [Bytes!]
  priceFeed_contains: Bytes
  priceFeed_not_contains: Bytes
  lastPriceUsd: BigDecimal
  lastPriceUsd_not: BigDecimal
  lastPriceUsd_gt: BigDecimal
  lastPriceUsd_lt: BigDecimal
  lastPriceUsd_gte: BigDecimal
  lastPriceUsd_lte: BigDecimal
  lastPriceUsd_in: [BigDecimal!]
  lastPriceUsd_not_in: [BigDecimal!]
  lastPriceBlockNumber: BigInt
  lastPriceBlockNumber_not: BigInt
  lastPriceBlockNumber_gt: BigInt
  lastPriceBlockNumber_lt: BigInt
  lastPriceBlockNumber_gte: BigInt
  lastPriceBlockNumber_lte: BigInt
  lastPriceBlockNumber_in: [BigInt!]
  lastPriceBlockNumber_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum BaseToken_orderBy {
  id
  creationBlockNumber
  market
  token
  lastConfigUpdateBlockNumber
  priceFeed
  lastPriceUsd
  lastPriceBlockNumber
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type BuyCollateralInteraction {
  """
  Transaction ID + event log index
  """
  id: Bytes!
  """
  Transaction this interaction is part of
  """
  transaction: Transaction!
  """
  Market the interaction is with
  """
  market: Market!
  """
  Buyer of the collateral
  """
  buyer: Bytes!
  """
  Asset being bought
  """
  asset: CollateralToken!
  """
  Collateral amount bought
  """
  collateralAmount: BigInt!
  """
  Base asset amount being given in exchange
  """
  baseAmount: BigInt!
  """
  Collateral amount bought in USD
  """
  collateralAmountUsd: BigDecimal!
  """
  Base asset amount being given in exchange in USD
  """
  baseAmountUsd: BigDecimal!
}

input BuyCollateralInteraction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  buyer: Bytes
  buyer_not: Bytes
  buyer_in: [Bytes!]
  buyer_not_in: [Bytes!]
  buyer_contains: Bytes
  buyer_not_contains: Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: CollateralToken_filter
  collateralAmount: BigInt
  collateralAmount_not: BigInt
  collateralAmount_gt: BigInt
  collateralAmount_lt: BigInt
  collateralAmount_gte: BigInt
  collateralAmount_lte: BigInt
  collateralAmount_in: [BigInt!]
  collateralAmount_not_in: [BigInt!]
  baseAmount: BigInt
  baseAmount_not: BigInt
  baseAmount_gt: BigInt
  baseAmount_lt: BigInt
  baseAmount_gte: BigInt
  baseAmount_lte: BigInt
  baseAmount_in: [BigInt!]
  baseAmount_not_in: [BigInt!]
  collateralAmountUsd: BigDecimal
  collateralAmountUsd_not: BigDecimal
  collateralAmountUsd_gt: BigDecimal
  collateralAmountUsd_lt: BigDecimal
  collateralAmountUsd_gte: BigDecimal
  collateralAmountUsd_lte: BigDecimal
  collateralAmountUsd_in: [BigDecimal!]
  collateralAmountUsd_not_in: [BigDecimal!]
  baseAmountUsd: BigDecimal
  baseAmountUsd_not: BigDecimal
  baseAmountUsd_gt: BigDecimal
  baseAmountUsd_lt: BigDecimal
  baseAmountUsd_gte: BigDecimal
  baseAmountUsd_lte: BigDecimal
  baseAmountUsd_in: [BigDecimal!]
  baseAmountUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum BuyCollateralInteraction_orderBy {
  id
  transaction
  market
  buyer
  asset
  collateralAmount
  baseAmount
  collateralAmountUsd
  baseAmountUsd
}

scalar Bytes

type ClaimRewardsInteraction {
  """
  Transaction ID + event log index
  """
  id: Bytes!
  """
  Transaction this interaction is part of
  """
  transaction: Transaction!
  """
  Account claiming the reward
  """
  account: Account!
  """
  Destination of the reward
  """
  destination: Bytes!
  """
  Reward token
  """
  token: Token!
  """
  Amount of reward token
  """
  amount: BigInt!
  """
  Amount of reward token in USD
  """
  amountUsd: BigDecimal!
}

input ClaimRewardsInteraction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  destination: Bytes
  destination_not: Bytes
  destination_in: [Bytes!]
  destination_not_in: [Bytes!]
  destination_contains: Bytes
  destination_not_contains: Bytes
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigDecimal
  amountUsd_not: BigDecimal
  amountUsd_gt: BigDecimal
  amountUsd_lt: BigDecimal
  amountUsd_gte: BigDecimal
  amountUsd_lte: BigDecimal
  amountUsd_in: [BigDecimal!]
  amountUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum ClaimRewardsInteraction_orderBy {
  id
  transaction
  account
  destination
  token
  amount
  amountUsd
}

interface CollateralBalance {
  id: Bytes!
  creationBlockNumber: BigInt!
  collateralToken: CollateralToken!
  lastUpdateBlockNumber: BigInt!
  balance: BigInt!
}

input CollateralBalance_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  creationBlockNumber: BigInt
  creationBlockNumber_not: BigInt
  creationBlockNumber_gt: BigInt
  creationBlockNumber_lt: BigInt
  creationBlockNumber_gte: BigInt
  creationBlockNumber_lte: BigInt
  creationBlockNumber_in: [BigInt!]
  creationBlockNumber_not_in: [BigInt!]
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum CollateralBalance_orderBy {
  id
  creationBlockNumber
  collateralToken
  lastUpdateBlockNumber
  balance
}

type CollateralToken {
  """
  Market ID + token ID + 'Col'
  """
  id: Bytes!
  """
  Block the collateral token was created
  """
  creationBlockNumber: BigInt!
  """
  Market the collateral token belongs to
  """
  market: Market!
  """
  Actual token
  """
  token: Token!
  """
  Last block the collateral token config was updated
  """
  lastConfigUpdateBlockNumber: BigInt!
  """
  Price feed for the collateral token
  """
  priceFeed: Bytes!
  """
  Percent of collateral that can be borrowed against
  """
  borrowCollateralFactor: BigDecimal!
  """
  Percent of collateral that can be borrowed before the account becomes liquidate-able
  """
  liquidateCollateralFactor: BigDecimal!
  """
  Percent penalty incurred by the account upon liquidation, 0.93 => 7% penalty
  """
  liquidationFactor: BigDecimal!
  """
  Max amount that can be supplied to protect the protocol against over exposure
  """
  supplyCap: BigInt!
  """
  Last token price in USD from the priceFeed
  """
  lastPriceUsd: BigDecimal!
  """
  Block of the last token price
  """
  lastPriceBlockNumber: BigInt!
}

input CollateralToken_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  creationBlockNumber: BigInt
  creationBlockNumber_not: BigInt
  creationBlockNumber_gt: BigInt
  creationBlockNumber_lt: BigInt
  creationBlockNumber_gte: BigInt
  creationBlockNumber_lte: BigInt
  creationBlockNumber_in: [BigInt!]
  creationBlockNumber_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  lastConfigUpdateBlockNumber: BigInt
  lastConfigUpdateBlockNumber_not: BigInt
  lastConfigUpdateBlockNumber_gt: BigInt
  lastConfigUpdateBlockNumber_lt: BigInt
  lastConfigUpdateBlockNumber_gte: BigInt
  lastConfigUpdateBlockNumber_lte: BigInt
  lastConfigUpdateBlockNumber_in: [BigInt!]
  lastConfigUpdateBlockNumber_not_in: [BigInt!]
  priceFeed: Bytes
  priceFeed_not: Bytes
  priceFeed_in: [Bytes!]
  priceFeed_not_in: [Bytes!]
  priceFeed_contains: Bytes
  priceFeed_not_contains: Bytes
  borrowCollateralFactor: BigDecimal
  borrowCollateralFactor_not: BigDecimal
  borrowCollateralFactor_gt: BigDecimal
  borrowCollateralFactor_lt: BigDecimal
  borrowCollateralFactor_gte: BigDecimal
  borrowCollateralFactor_lte: BigDecimal
  borrowCollateralFactor_in: [BigDecimal!]
  borrowCollateralFactor_not_in: [BigDecimal!]
  liquidateCollateralFactor: BigDecimal
  liquidateCollateralFactor_not: BigDecimal
  liquidateCollateralFactor_gt: BigDecimal
  liquidateCollateralFactor_lt: BigDecimal
  liquidateCollateralFactor_gte: BigDecimal
  liquidateCollateralFactor_lte: BigDecimal
  liquidateCollateralFactor_in: [BigDecimal!]
  liquidateCollateralFactor_not_in: [BigDecimal!]
  liquidationFactor: BigDecimal
  liquidationFactor_not: BigDecimal
  liquidationFactor_gt: BigDecimal
  liquidationFactor_lt: BigDecimal
  liquidationFactor_gte: BigDecimal
  liquidationFactor_lte: BigDecimal
  liquidationFactor_in: [BigDecimal!]
  liquidationFactor_not_in: [BigDecimal!]
  supplyCap: BigInt
  supplyCap_not: BigInt
  supplyCap_gt: BigInt
  supplyCap_lt: BigInt
  supplyCap_gte: BigInt
  supplyCap_lte: BigInt
  supplyCap_in: [BigInt!]
  supplyCap_not_in: [BigInt!]
  lastPriceUsd: BigDecimal
  lastPriceUsd_not: BigDecimal
  lastPriceUsd_gt: BigDecimal
  lastPriceUsd_lt: BigDecimal
  lastPriceUsd_gte: BigDecimal
  lastPriceUsd_lte: BigDecimal
  lastPriceUsd_in: [BigDecimal!]
  lastPriceUsd_not_in: [BigDecimal!]
  lastPriceBlockNumber: BigInt
  lastPriceBlockNumber_not: BigInt
  lastPriceBlockNumber_gt: BigInt
  lastPriceBlockNumber_lt: BigInt
  lastPriceBlockNumber_gte: BigInt
  lastPriceBlockNumber_lte: BigInt
  lastPriceBlockNumber_in: [BigInt!]
  lastPriceBlockNumber_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum CollateralToken_orderBy {
  id
  creationBlockNumber
  market
  token
  lastConfigUpdateBlockNumber
  priceFeed
  borrowCollateralFactor
  liquidateCollateralFactor
  liquidationFactor
  supplyCap
  lastPriceUsd
  lastPriceBlockNumber
}

type DailyMarketAccounting {
  """
  Market ID + day
  """
  id: Bytes!
  """
  Days since unix epoch
  """
  day: BigInt!
  """
  Seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Market the accounting is for
  """
  market: Market!
  """
  Accounting snapshot
  """
  accounting: MarketAccounting!
}

input DailyMarketAccounting_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  day: BigInt
  day_not: BigInt
  day_gt: BigInt
  day_lt: BigInt
  day_gte: BigInt
  day_lte: BigInt
  day_in: [BigInt!]
  day_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  accounting: String
  accounting_not: String
  accounting_gt: String
  accounting_lt: String
  accounting_gte: String
  accounting_lte: String
  accounting_in: [String!]
  accounting_not_in: [String!]
  accounting_contains: String
  accounting_contains_nocase: String
  accounting_not_contains: String
  accounting_not_contains_nocase: String
  accounting_starts_with: String
  accounting_starts_with_nocase: String
  accounting_not_starts_with: String
  accounting_not_starts_with_nocase: String
  accounting_ends_with: String
  accounting_ends_with_nocase: String
  accounting_not_ends_with: String
  accounting_not_ends_with_nocase: String
  accounting_: MarketAccounting_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum DailyMarketAccounting_orderBy {
  id
  day
  timestamp
  market
  accounting
}

type DailyProtocolAccounting {
  """
  Day
  """
  id: Bytes!
  """
  Days since unix epoch
  """
  day: BigInt!
  """
  Seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Protocol the accounting is for
  """
  protocol: Protocol!
  """
  Accounting snapshot
  """
  accounting: ProtocolAccounting!
}

input DailyProtocolAccounting_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  day: BigInt
  day_not: BigInt
  day_gt: BigInt
  day_lt: BigInt
  day_gte: BigInt
  day_lte: BigInt
  day_in: [BigInt!]
  day_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Protocol_filter
  accounting: String
  accounting_not: String
  accounting_gt: String
  accounting_lt: String
  accounting_gte: String
  accounting_lte: String
  accounting_in: [String!]
  accounting_not_in: [String!]
  accounting_contains: String
  accounting_contains_nocase: String
  accounting_not_contains: String
  accounting_not_contains_nocase: String
  accounting_starts_with: String
  accounting_starts_with_nocase: String
  accounting_not_starts_with: String
  accounting_not_starts_with_nocase: String
  accounting_ends_with: String
  accounting_ends_with_nocase: String
  accounting_not_ends_with: String
  accounting_not_ends_with_nocase: String
  accounting_: ProtocolAccounting_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum DailyProtocolAccounting_orderBy {
  id
  day
  timestamp
  protocol
  accounting
}

type HourlyMarketAccounting {
  """
  Market ID + hour
  """
  id: Bytes!
  """
  Hours since unix epoch
  """
  hour: BigInt!
  """
  Seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Market the accounting if for
  """
  market: Market!
  """
  Accounting snapshot
  """
  accounting: MarketAccounting!
}

input HourlyMarketAccounting_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hour: BigInt
  hour_not: BigInt
  hour_gt: BigInt
  hour_lt: BigInt
  hour_gte: BigInt
  hour_lte: BigInt
  hour_in: [BigInt!]
  hour_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  accounting: String
  accounting_not: String
  accounting_gt: String
  accounting_lt: String
  accounting_gte: String
  accounting_lte: String
  accounting_in: [String!]
  accounting_not_in: [String!]
  accounting_contains: String
  accounting_contains_nocase: String
  accounting_not_contains: String
  accounting_not_contains_nocase: String
  accounting_starts_with: String
  accounting_starts_with_nocase: String
  accounting_not_starts_with: String
  accounting_not_starts_with_nocase: String
  accounting_ends_with: String
  accounting_ends_with_nocase: String
  accounting_not_ends_with: String
  accounting_not_ends_with_nocase: String
  accounting_: MarketAccounting_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum HourlyMarketAccounting_orderBy {
  id
  hour
  timestamp
  market
  accounting
}

type HourlyProtocolAccounting {
  """
  Hour
  """
  id: Bytes!
  """
  Hours since unix epoch
  """
  hour: BigInt!
  """
  Seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Protocol the accounting is for
  """
  protocol: Protocol!
  """
  Accounting snapshot
  """
  accounting: ProtocolAccounting!
}

input HourlyProtocolAccounting_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hour: BigInt
  hour_not: BigInt
  hour_gt: BigInt
  hour_lt: BigInt
  hour_gte: BigInt
  hour_lte: BigInt
  hour_in: [BigInt!]
  hour_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Protocol_filter
  accounting: String
  accounting_not: String
  accounting_gt: String
  accounting_lt: String
  accounting_gte: String
  accounting_lte: String
  accounting_in: [String!]
  accounting_not_in: [String!]
  accounting_contains: String
  accounting_contains_nocase: String
  accounting_not_contains: String
  accounting_not_contains_nocase: String
  accounting_starts_with: String
  accounting_starts_with_nocase: String
  accounting_not_starts_with: String
  accounting_not_starts_with_nocase: String
  accounting_ends_with: String
  accounting_ends_with_nocase: String
  accounting_not_ends_with: String
  accounting_not_ends_with_nocase: String
  accounting_: ProtocolAccounting_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum HourlyProtocolAccounting_orderBy {
  id
  hour
  timestamp
  protocol
  accounting
}

type Market {
  """
  Comet proxy address
  """
  id: Bytes!
  """
  Comet proxy address
  """
  cometProxy: Bytes!
  """
  Protocol this market is part of
  """
  protocol: Protocol!
  """
  Block number the market was created
  """
  creationBlockNumber: BigInt!
  """
  Current configuration of this market
  """
  configuration: MarketConfiguration!
  """
  Current accounting of this market
  """
  accounting: MarketAccounting!
  """
  Current cumulative usage of this market
  """
  cumulativeUsage: Usage!
  """
  Current collateral balances of this market
  """
  collateralBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketCollateralBalance_orderBy
    orderDirection: OrderDirection
    where: MarketCollateralBalance_filter
  ): [MarketCollateralBalance!]!
  """
  Current positions in this market
  """
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
  ): [Position!]!
  """
  All interactions where the base asset was supplied to this market, including those repaying loans
  """
  supplyBaseInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: SupplyBaseInteraction_orderBy
    orderDirection: OrderDirection
    where: SupplyBaseInteraction_filter
  ): [SupplyBaseInteraction!]!
  """
  All interactions where the base asset was withdraw from this market, including those taking loans
  """
  withdrawBaseInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawBaseInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawBaseInteraction_filter
  ): [WithdrawBaseInteraction!]!
  """
  All interactions where a position was liquidated in this market
  """
  absorbDebtInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: AbsorbDebtInteraction_orderBy
    orderDirection: OrderDirection
    where: AbsorbDebtInteraction_filter
  ): [AbsorbDebtInteraction!]!
  """
  All interactions where a collateral asset was supplied to this market
  """
  supplyCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: SupplyCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: SupplyCollateralInteraction_filter
  ): [SupplyCollateralInteraction!]!
  """
  All interactions where a collateral asset was withdrawn from this market
  """
  withdrawCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawCollateralInteraction_filter
  ): [WithdrawCollateralInteraction!]!
  """
  All interactions where a collateral asset was transferred in this market
  """
  transferCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: TransferCollateralInteraction_filter
  ): [TransferCollateralInteraction!]!
  """
  All interactions where a collateral asset was absorbed by the market during a liquidation
  """
  absorbCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: AbsorbCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: AbsorbCollateralInteraction_filter
  ): [AbsorbCollateralInteraction!]!
  """
  All interactions where a collateral asset was bought using base assets in this market
  """
  buyCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: BuyCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: BuyCollateralInteraction_filter
  ): [BuyCollateralInteraction!]!
  """
  All interactions where reserves were withdrawn from this market
  """
  withdrawReservesInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawReservesInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawReservesInteraction_filter
  ): [WithdrawReservesInteraction!]!
  """
  Historical snapshots of hourly market usage
  """
  hourlyUsage(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketHourlyUsage_orderBy
    orderDirection: OrderDirection
    where: MarketHourlyUsage_filter
  ): [MarketHourlyUsage!]!
  """
  Historical snapshots of daily market usage
  """
  dailyUsage(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketDailyUsage_orderBy
    orderDirection: OrderDirection
    where: MarketDailyUsage_filter
  ): [MarketDailyUsage!]!
  """
  Historical snapshots of market configuration changes, these only get taken on a config change (not periodically)
  """
  configurationSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketConfigurationSnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketConfigurationSnapshot_filter
  ): [MarketConfigurationSnapshot!]!
  """
  Historical snapshots of hourly market accounting
  """
  hourlyMarketAccounting(
    skip: Int = 0
    first: Int = 100
    orderBy: HourlyMarketAccounting_orderBy
    orderDirection: OrderDirection
    where: HourlyMarketAccounting_filter
  ): [HourlyMarketAccounting!]!
  """
  Historical snapshots of daily market accounting
  """
  dailyMarketAccounting(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyMarketAccounting_orderBy
    orderDirection: OrderDirection
    where: DailyMarketAccounting_filter
  ): [DailyMarketAccounting!]!
  """
  Historical snapshots of weekly market accounting
  """
  weeklyMarketAccounting(
    skip: Int = 0
    first: Int = 100
    orderBy: WeeklyMarketAccounting_orderBy
    orderDirection: OrderDirection
    where: WeeklyMarketAccounting_filter
  ): [WeeklyMarketAccounting!]!
}

type MarketAccounting {
  """
  Market ID + hour number for snapshots
  """
  id: Bytes!
  """
  Market the accounting is for
  """
  market: Market!
  """
  Last block the accounting was updated
  """
  lastAccountingUpdatedBlockNumber: BigInt!
  """
  Base supply index, this tracks protocol supply interest and monotonically increases
  """
  baseSupplyIndex: BigInt!
  """
  Base supply index, this tracks protocol borrow borrow and monotonically increases
  """
  baseBorrowIndex: BigInt!
  """
  Tracking supply index for supply rewards
  """
  trackingSupplyIndex: BigInt!
  """
  Tracking borrow index for borrow rewards
  """
  trackingBorrowIndex: BigInt!
  """
  Last time the market accrued interest (i.e indices changed)
  """
  lastAccrualTime: BigInt!
  """
  Total base principal supplied to the market, this can be used to construct the most accurate totalSupply in the case where indices changes haven't been picked up by the subgraph (can accrue without an event)
  """
  totalBasePrincipalSupply: BigInt!
  """
  Total base principal borrowed from the market, this can be used to construct the most accurate totalBorrow in the case where indices changes haven't been picked up by the subgraph (can accrue without an event)
  """
  totalBasePrincipalBorrow: BigInt!
  """
  Base asset reserve balance
  """
  baseReserveBalance: BigInt!
  """
  Total amount of base supplied to the market (present value)
  """
  totalBaseSupply: BigInt!
  """
  Total amount of base borrowed from the market (present value)
  """
  totalBaseBorrow: BigInt!
  """
  Total amount of base supplied to the market in USD
  """
  totalBaseSupplyUsd: BigDecimal!
  """
  Total amount of base borrowed from the market in USD
  """
  totalBaseBorrowUsd: BigDecimal!
  """
  Base asset reserve balance of te market in USD
  """
  baseReserveBalanceUsd: BigDecimal!
  """
  Total collateral balance in USD
  """
  collateralBalanceUsd: BigDecimal!
  """
  Total collateral reserve balance in USD
  """
  collateralReservesBalanceUsd: BigDecimal!
  """
  Total reserve balance in USD (collateral + base)
  """
  totalReserveBalanceUsd: BigDecimal!
  """
  Utilization percent of the market (totalBaseBorrowUsd / totalBaseSupplyUsd)
  """
  utilization: BigDecimal!
  """
  Collateralization percent of the protocol (totalBaseSupplyUsd / totalBaseBorrowUsd, or 1 / utilization)
  """
  collateralization: BigDecimal!
  """
  Base supply APR of the market
  """
  supplyApr: BigDecimal!
  """
  Base borrow APR of the market
  """
  borrowApr: BigDecimal!
  """
  Reward supply APR of the market
  """
  rewardSupplyApr: BigDecimal!
  """
  Reward borrow APR of the market
  """
  rewardBorrowApr: BigDecimal!
  """
  Net supply APR of the market (supplyApr + rewardSupplyApr)
  """
  netSupplyApr: BigDecimal!
  """
  Net borrow APR of the market (borrowApr - rewardBorrowApr)
  """
  netBorrowApr: BigDecimal!
}

input MarketAccounting_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  lastAccountingUpdatedBlockNumber: BigInt
  lastAccountingUpdatedBlockNumber_not: BigInt
  lastAccountingUpdatedBlockNumber_gt: BigInt
  lastAccountingUpdatedBlockNumber_lt: BigInt
  lastAccountingUpdatedBlockNumber_gte: BigInt
  lastAccountingUpdatedBlockNumber_lte: BigInt
  lastAccountingUpdatedBlockNumber_in: [BigInt!]
  lastAccountingUpdatedBlockNumber_not_in: [BigInt!]
  baseSupplyIndex: BigInt
  baseSupplyIndex_not: BigInt
  baseSupplyIndex_gt: BigInt
  baseSupplyIndex_lt: BigInt
  baseSupplyIndex_gte: BigInt
  baseSupplyIndex_lte: BigInt
  baseSupplyIndex_in: [BigInt!]
  baseSupplyIndex_not_in: [BigInt!]
  baseBorrowIndex: BigInt
  baseBorrowIndex_not: BigInt
  baseBorrowIndex_gt: BigInt
  baseBorrowIndex_lt: BigInt
  baseBorrowIndex_gte: BigInt
  baseBorrowIndex_lte: BigInt
  baseBorrowIndex_in: [BigInt!]
  baseBorrowIndex_not_in: [BigInt!]
  trackingSupplyIndex: BigInt
  trackingSupplyIndex_not: BigInt
  trackingSupplyIndex_gt: BigInt
  trackingSupplyIndex_lt: BigInt
  trackingSupplyIndex_gte: BigInt
  trackingSupplyIndex_lte: BigInt
  trackingSupplyIndex_in: [BigInt!]
  trackingSupplyIndex_not_in: [BigInt!]
  trackingBorrowIndex: BigInt
  trackingBorrowIndex_not: BigInt
  trackingBorrowIndex_gt: BigInt
  trackingBorrowIndex_lt: BigInt
  trackingBorrowIndex_gte: BigInt
  trackingBorrowIndex_lte: BigInt
  trackingBorrowIndex_in: [BigInt!]
  trackingBorrowIndex_not_in: [BigInt!]
  lastAccrualTime: BigInt
  lastAccrualTime_not: BigInt
  lastAccrualTime_gt: BigInt
  lastAccrualTime_lt: BigInt
  lastAccrualTime_gte: BigInt
  lastAccrualTime_lte: BigInt
  lastAccrualTime_in: [BigInt!]
  lastAccrualTime_not_in: [BigInt!]
  totalBasePrincipalSupply: BigInt
  totalBasePrincipalSupply_not: BigInt
  totalBasePrincipalSupply_gt: BigInt
  totalBasePrincipalSupply_lt: BigInt
  totalBasePrincipalSupply_gte: BigInt
  totalBasePrincipalSupply_lte: BigInt
  totalBasePrincipalSupply_in: [BigInt!]
  totalBasePrincipalSupply_not_in: [BigInt!]
  totalBasePrincipalBorrow: BigInt
  totalBasePrincipalBorrow_not: BigInt
  totalBasePrincipalBorrow_gt: BigInt
  totalBasePrincipalBorrow_lt: BigInt
  totalBasePrincipalBorrow_gte: BigInt
  totalBasePrincipalBorrow_lte: BigInt
  totalBasePrincipalBorrow_in: [BigInt!]
  totalBasePrincipalBorrow_not_in: [BigInt!]
  baseReserveBalance: BigInt
  baseReserveBalance_not: BigInt
  baseReserveBalance_gt: BigInt
  baseReserveBalance_lt: BigInt
  baseReserveBalance_gte: BigInt
  baseReserveBalance_lte: BigInt
  baseReserveBalance_in: [BigInt!]
  baseReserveBalance_not_in: [BigInt!]
  totalBaseSupply: BigInt
  totalBaseSupply_not: BigInt
  totalBaseSupply_gt: BigInt
  totalBaseSupply_lt: BigInt
  totalBaseSupply_gte: BigInt
  totalBaseSupply_lte: BigInt
  totalBaseSupply_in: [BigInt!]
  totalBaseSupply_not_in: [BigInt!]
  totalBaseBorrow: BigInt
  totalBaseBorrow_not: BigInt
  totalBaseBorrow_gt: BigInt
  totalBaseBorrow_lt: BigInt
  totalBaseBorrow_gte: BigInt
  totalBaseBorrow_lte: BigInt
  totalBaseBorrow_in: [BigInt!]
  totalBaseBorrow_not_in: [BigInt!]
  totalBaseSupplyUsd: BigDecimal
  totalBaseSupplyUsd_not: BigDecimal
  totalBaseSupplyUsd_gt: BigDecimal
  totalBaseSupplyUsd_lt: BigDecimal
  totalBaseSupplyUsd_gte: BigDecimal
  totalBaseSupplyUsd_lte: BigDecimal
  totalBaseSupplyUsd_in: [BigDecimal!]
  totalBaseSupplyUsd_not_in: [BigDecimal!]
  totalBaseBorrowUsd: BigDecimal
  totalBaseBorrowUsd_not: BigDecimal
  totalBaseBorrowUsd_gt: BigDecimal
  totalBaseBorrowUsd_lt: BigDecimal
  totalBaseBorrowUsd_gte: BigDecimal
  totalBaseBorrowUsd_lte: BigDecimal
  totalBaseBorrowUsd_in: [BigDecimal!]
  totalBaseBorrowUsd_not_in: [BigDecimal!]
  baseReserveBalanceUsd: BigDecimal
  baseReserveBalanceUsd_not: BigDecimal
  baseReserveBalanceUsd_gt: BigDecimal
  baseReserveBalanceUsd_lt: BigDecimal
  baseReserveBalanceUsd_gte: BigDecimal
  baseReserveBalanceUsd_lte: BigDecimal
  baseReserveBalanceUsd_in: [BigDecimal!]
  baseReserveBalanceUsd_not_in: [BigDecimal!]
  collateralBalanceUsd: BigDecimal
  collateralBalanceUsd_not: BigDecimal
  collateralBalanceUsd_gt: BigDecimal
  collateralBalanceUsd_lt: BigDecimal
  collateralBalanceUsd_gte: BigDecimal
  collateralBalanceUsd_lte: BigDecimal
  collateralBalanceUsd_in: [BigDecimal!]
  collateralBalanceUsd_not_in: [BigDecimal!]
  collateralReservesBalanceUsd: BigDecimal
  collateralReservesBalanceUsd_not: BigDecimal
  collateralReservesBalanceUsd_gt: BigDecimal
  collateralReservesBalanceUsd_lt: BigDecimal
  collateralReservesBalanceUsd_gte: BigDecimal
  collateralReservesBalanceUsd_lte: BigDecimal
  collateralReservesBalanceUsd_in: [BigDecimal!]
  collateralReservesBalanceUsd_not_in: [BigDecimal!]
  totalReserveBalanceUsd: BigDecimal
  totalReserveBalanceUsd_not: BigDecimal
  totalReserveBalanceUsd_gt: BigDecimal
  totalReserveBalanceUsd_lt: BigDecimal
  totalReserveBalanceUsd_gte: BigDecimal
  totalReserveBalanceUsd_lte: BigDecimal
  totalReserveBalanceUsd_in: [BigDecimal!]
  totalReserveBalanceUsd_not_in: [BigDecimal!]
  utilization: BigDecimal
  utilization_not: BigDecimal
  utilization_gt: BigDecimal
  utilization_lt: BigDecimal
  utilization_gte: BigDecimal
  utilization_lte: BigDecimal
  utilization_in: [BigDecimal!]
  utilization_not_in: [BigDecimal!]
  collateralization: BigDecimal
  collateralization_not: BigDecimal
  collateralization_gt: BigDecimal
  collateralization_lt: BigDecimal
  collateralization_gte: BigDecimal
  collateralization_lte: BigDecimal
  collateralization_in: [BigDecimal!]
  collateralization_not_in: [BigDecimal!]
  supplyApr: BigDecimal
  supplyApr_not: BigDecimal
  supplyApr_gt: BigDecimal
  supplyApr_lt: BigDecimal
  supplyApr_gte: BigDecimal
  supplyApr_lte: BigDecimal
  supplyApr_in: [BigDecimal!]
  supplyApr_not_in: [BigDecimal!]
  borrowApr: BigDecimal
  borrowApr_not: BigDecimal
  borrowApr_gt: BigDecimal
  borrowApr_lt: BigDecimal
  borrowApr_gte: BigDecimal
  borrowApr_lte: BigDecimal
  borrowApr_in: [BigDecimal!]
  borrowApr_not_in: [BigDecimal!]
  rewardSupplyApr: BigDecimal
  rewardSupplyApr_not: BigDecimal
  rewardSupplyApr_gt: BigDecimal
  rewardSupplyApr_lt: BigDecimal
  rewardSupplyApr_gte: BigDecimal
  rewardSupplyApr_lte: BigDecimal
  rewardSupplyApr_in: [BigDecimal!]
  rewardSupplyApr_not_in: [BigDecimal!]
  rewardBorrowApr: BigDecimal
  rewardBorrowApr_not: BigDecimal
  rewardBorrowApr_gt: BigDecimal
  rewardBorrowApr_lt: BigDecimal
  rewardBorrowApr_gte: BigDecimal
  rewardBorrowApr_lte: BigDecimal
  rewardBorrowApr_in: [BigDecimal!]
  rewardBorrowApr_not_in: [BigDecimal!]
  netSupplyApr: BigDecimal
  netSupplyApr_not: BigDecimal
  netSupplyApr_gt: BigDecimal
  netSupplyApr_lt: BigDecimal
  netSupplyApr_gte: BigDecimal
  netSupplyApr_lte: BigDecimal
  netSupplyApr_in: [BigDecimal!]
  netSupplyApr_not_in: [BigDecimal!]
  netBorrowApr: BigDecimal
  netBorrowApr_not: BigDecimal
  netBorrowApr_gt: BigDecimal
  netBorrowApr_lt: BigDecimal
  netBorrowApr_gte: BigDecimal
  netBorrowApr_lte: BigDecimal
  netBorrowApr_in: [BigDecimal!]
  netBorrowApr_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum MarketAccounting_orderBy {
  id
  market
  lastAccountingUpdatedBlockNumber
  baseSupplyIndex
  baseBorrowIndex
  trackingSupplyIndex
  trackingBorrowIndex
  lastAccrualTime
  totalBasePrincipalSupply
  totalBasePrincipalBorrow
  baseReserveBalance
  totalBaseSupply
  totalBaseBorrow
  totalBaseSupplyUsd
  totalBaseBorrowUsd
  baseReserveBalanceUsd
  collateralBalanceUsd
  collateralReservesBalanceUsd
  totalReserveBalanceUsd
  utilization
  collateralization
  supplyApr
  borrowApr
  rewardSupplyApr
  rewardBorrowApr
  netSupplyApr
  netBorrowApr
}

type MarketCollateralBalance implements CollateralBalance {
  """
  Collateral token ID + 'BAL'
  """
  id: Bytes!
  """
  Block number when this balance was created
  """
  creationBlockNumber: BigInt!
  """
  Collateral token the balance is for
  """
  collateralToken: CollateralToken!
  """
  Market balance is for
  """
  market: Market!
  """
  Last block number the balances and reserves were updated
  """
  lastUpdateBlockNumber: BigInt!
  """
  Balance of collateralToken
  """
  balance: BigInt!
  """
  Reserves of the collateral token
  """
  reserves: BigInt!
  """
  Balance in USD of the collateral token
  """
  balanceUsd: BigDecimal!
  """
  Reserves in USD of the collateral token
  """
  reservesUsd: BigDecimal!
}

input MarketCollateralBalance_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  creationBlockNumber: BigInt
  creationBlockNumber_not: BigInt
  creationBlockNumber_gt: BigInt
  creationBlockNumber_lt: BigInt
  creationBlockNumber_gte: BigInt
  creationBlockNumber_lte: BigInt
  creationBlockNumber_in: [BigInt!]
  creationBlockNumber_not_in: [BigInt!]
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  reserves: BigInt
  reserves_not: BigInt
  reserves_gt: BigInt
  reserves_lt: BigInt
  reserves_gte: BigInt
  reserves_lte: BigInt
  reserves_in: [BigInt!]
  reserves_not_in: [BigInt!]
  balanceUsd: BigDecimal
  balanceUsd_not: BigDecimal
  balanceUsd_gt: BigDecimal
  balanceUsd_lt: BigDecimal
  balanceUsd_gte: BigDecimal
  balanceUsd_lte: BigDecimal
  balanceUsd_in: [BigDecimal!]
  balanceUsd_not_in: [BigDecimal!]
  reservesUsd: BigDecimal
  reservesUsd_not: BigDecimal
  reservesUsd_gt: BigDecimal
  reservesUsd_lt: BigDecimal
  reservesUsd_gte: BigDecimal
  reservesUsd_lte: BigDecimal
  reservesUsd_in: [BigDecimal!]
  reservesUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum MarketCollateralBalance_orderBy {
  id
  creationBlockNumber
  collateralToken
  market
  lastUpdateBlockNumber
  balance
  reserves
  balanceUsd
  reservesUsd
}

type MarketConfiguration {
  """
  Market proxy address or block number + log index for snapshots
  """
  id: Bytes!
  """
  Market to configuration is for
  """
  market: Market!
  """
  Comet implementation that the market proxy points to
  """
  cometImplementation: Bytes
  """
  Last block that this configuration was updated
  """
  lastConfigurationUpdateBlockNumber: BigInt!
  """
  Name of the market
  """
  name: String!
  """
  Symbol for the ERC20 that market represents
  """
  symbol: String!
  """
  Factory contract address for the market
  """
  factory: Bytes!
  """
  Governor of the market
  """
  governor: Bytes!
  """
  Pause guardian for the market
  """
  pauseGuardian: Bytes!
  """
  Comet extension delegate for the market
  """
  extensionDelegate: Bytes!
  """
  Supply rate model utilization kink in percent
  """
  supplyKink: BigDecimal!
  """
  Slope of the supply rate model when the utilization is below the supply kink
  """
  supplyPerSecondInterestRateSlopeLow: BigInt!
  """
  Slope of the supply rate model when the utilization is above the supply kink
  """
  supplyPerSecondInterestRateSlopeHigh: BigInt!
  """
  Base for the supply rate model
  """
  supplyPerSecondInterestRateBase: BigInt!
  """
  Borrow rate model utilization kink in percent
  """
  borrowKink: BigDecimal!
  """
  Slope of the borrow rate model when the utilization is below the borrow kink
  """
  borrowPerSecondInterestRateSlopeLow: BigInt!
  """
  Slope of the borrow rate model when the utilization is above the borrow kink
  """
  borrowPerSecondInterestRateSlopeHigh: BigInt!
  """
  Base for the borrow rate model
  """
  borrowPerSecondInterestRateBase: BigInt!
  """
  Store front factor used to compute the discount factor for liquidations
  """
  storeFrontPriceFactor: BigInt!
  """
  Tracking index scale
  """
  trackingIndexScale: BigInt!
  """
  Base tracking supply speed for rewards
  """
  baseTrackingSupplySpeed: BigInt!
  """
  Base tracking borrow speed for rewards
  """
  baseTrackingBorrowSpeed: BigInt!
  """
  Minimum base asset in market before rewards will accrue
  """
  baseMinForRewards: BigInt!
  """
  Smallest amount of base that can be borrowed
  """
  baseBorrowMin: BigInt!
  """
  Target base reserves for the market, when reserve drop below collateral reserves become for sale to bring base reserves above this
  """
  targetReserves: BigInt!
  """
  Base tokens for the market
  """
  baseToken: BaseToken!
  """
  List of collateral tokens for the market
  """
  collateralTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralToken_orderBy
    orderDirection: OrderDirection
    where: CollateralToken_filter
  ): [CollateralToken!]!
}

type MarketConfigurationSnapshot {
  """
  Block number + log index. Note config snapshots are only taken when config changes, not periodically
  """
  id: Bytes!
  """
  Timestamp in seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Market the config is for
  """
  market: Market!
  """
  Configuration snapshot
  """
  configuration: MarketConfiguration!
}

input MarketConfigurationSnapshot_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  configuration: String
  configuration_not: String
  configuration_gt: String
  configuration_lt: String
  configuration_gte: String
  configuration_lte: String
  configuration_in: [String!]
  configuration_not_in: [String!]
  configuration_contains: String
  configuration_contains_nocase: String
  configuration_not_contains: String
  configuration_not_contains_nocase: String
  configuration_starts_with: String
  configuration_starts_with_nocase: String
  configuration_not_starts_with: String
  configuration_not_starts_with_nocase: String
  configuration_ends_with: String
  configuration_ends_with_nocase: String
  configuration_not_ends_with: String
  configuration_not_ends_with_nocase: String
  configuration_: MarketConfiguration_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum MarketConfigurationSnapshot_orderBy {
  id
  timestamp
  market
  configuration
}

input MarketConfiguration_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  cometImplementation: Bytes
  cometImplementation_not: Bytes
  cometImplementation_in: [Bytes!]
  cometImplementation_not_in: [Bytes!]
  cometImplementation_contains: Bytes
  cometImplementation_not_contains: Bytes
  lastConfigurationUpdateBlockNumber: BigInt
  lastConfigurationUpdateBlockNumber_not: BigInt
  lastConfigurationUpdateBlockNumber_gt: BigInt
  lastConfigurationUpdateBlockNumber_lt: BigInt
  lastConfigurationUpdateBlockNumber_gte: BigInt
  lastConfigurationUpdateBlockNumber_lte: BigInt
  lastConfigurationUpdateBlockNumber_in: [BigInt!]
  lastConfigurationUpdateBlockNumber_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  factory: Bytes
  factory_not: Bytes
  factory_in: [Bytes!]
  factory_not_in: [Bytes!]
  factory_contains: Bytes
  factory_not_contains: Bytes
  governor: Bytes
  governor_not: Bytes
  governor_in: [Bytes!]
  governor_not_in: [Bytes!]
  governor_contains: Bytes
  governor_not_contains: Bytes
  pauseGuardian: Bytes
  pauseGuardian_not: Bytes
  pauseGuardian_in: [Bytes!]
  pauseGuardian_not_in: [Bytes!]
  pauseGuardian_contains: Bytes
  pauseGuardian_not_contains: Bytes
  extensionDelegate: Bytes
  extensionDelegate_not: Bytes
  extensionDelegate_in: [Bytes!]
  extensionDelegate_not_in: [Bytes!]
  extensionDelegate_contains: Bytes
  extensionDelegate_not_contains: Bytes
  supplyKink: BigDecimal
  supplyKink_not: BigDecimal
  supplyKink_gt: BigDecimal
  supplyKink_lt: BigDecimal
  supplyKink_gte: BigDecimal
  supplyKink_lte: BigDecimal
  supplyKink_in: [BigDecimal!]
  supplyKink_not_in: [BigDecimal!]
  supplyPerSecondInterestRateSlopeLow: BigInt
  supplyPerSecondInterestRateSlopeLow_not: BigInt
  supplyPerSecondInterestRateSlopeLow_gt: BigInt
  supplyPerSecondInterestRateSlopeLow_lt: BigInt
  supplyPerSecondInterestRateSlopeLow_gte: BigInt
  supplyPerSecondInterestRateSlopeLow_lte: BigInt
  supplyPerSecondInterestRateSlopeLow_in: [BigInt!]
  supplyPerSecondInterestRateSlopeLow_not_in: [BigInt!]
  supplyPerSecondInterestRateSlopeHigh: BigInt
  supplyPerSecondInterestRateSlopeHigh_not: BigInt
  supplyPerSecondInterestRateSlopeHigh_gt: BigInt
  supplyPerSecondInterestRateSlopeHigh_lt: BigInt
  supplyPerSecondInterestRateSlopeHigh_gte: BigInt
  supplyPerSecondInterestRateSlopeHigh_lte: BigInt
  supplyPerSecondInterestRateSlopeHigh_in: [BigInt!]
  supplyPerSecondInterestRateSlopeHigh_not_in: [BigInt!]
  supplyPerSecondInterestRateBase: BigInt
  supplyPerSecondInterestRateBase_not: BigInt
  supplyPerSecondInterestRateBase_gt: BigInt
  supplyPerSecondInterestRateBase_lt: BigInt
  supplyPerSecondInterestRateBase_gte: BigInt
  supplyPerSecondInterestRateBase_lte: BigInt
  supplyPerSecondInterestRateBase_in: [BigInt!]
  supplyPerSecondInterestRateBase_not_in: [BigInt!]
  borrowKink: BigDecimal
  borrowKink_not: BigDecimal
  borrowKink_gt: BigDecimal
  borrowKink_lt: BigDecimal
  borrowKink_gte: BigDecimal
  borrowKink_lte: BigDecimal
  borrowKink_in: [BigDecimal!]
  borrowKink_not_in: [BigDecimal!]
  borrowPerSecondInterestRateSlopeLow: BigInt
  borrowPerSecondInterestRateSlopeLow_not: BigInt
  borrowPerSecondInterestRateSlopeLow_gt: BigInt
  borrowPerSecondInterestRateSlopeLow_lt: BigInt
  borrowPerSecondInterestRateSlopeLow_gte: BigInt
  borrowPerSecondInterestRateSlopeLow_lte: BigInt
  borrowPerSecondInterestRateSlopeLow_in: [BigInt!]
  borrowPerSecondInterestRateSlopeLow_not_in: [BigInt!]
  borrowPerSecondInterestRateSlopeHigh: BigInt
  borrowPerSecondInterestRateSlopeHigh_not: BigInt
  borrowPerSecondInterestRateSlopeHigh_gt: BigInt
  borrowPerSecondInterestRateSlopeHigh_lt: BigInt
  borrowPerSecondInterestRateSlopeHigh_gte: BigInt
  borrowPerSecondInterestRateSlopeHigh_lte: BigInt
  borrowPerSecondInterestRateSlopeHigh_in: [BigInt!]
  borrowPerSecondInterestRateSlopeHigh_not_in: [BigInt!]
  borrowPerSecondInterestRateBase: BigInt
  borrowPerSecondInterestRateBase_not: BigInt
  borrowPerSecondInterestRateBase_gt: BigInt
  borrowPerSecondInterestRateBase_lt: BigInt
  borrowPerSecondInterestRateBase_gte: BigInt
  borrowPerSecondInterestRateBase_lte: BigInt
  borrowPerSecondInterestRateBase_in: [BigInt!]
  borrowPerSecondInterestRateBase_not_in: [BigInt!]
  storeFrontPriceFactor: BigInt
  storeFrontPriceFactor_not: BigInt
  storeFrontPriceFactor_gt: BigInt
  storeFrontPriceFactor_lt: BigInt
  storeFrontPriceFactor_gte: BigInt
  storeFrontPriceFactor_lte: BigInt
  storeFrontPriceFactor_in: [BigInt!]
  storeFrontPriceFactor_not_in: [BigInt!]
  trackingIndexScale: BigInt
  trackingIndexScale_not: BigInt
  trackingIndexScale_gt: BigInt
  trackingIndexScale_lt: BigInt
  trackingIndexScale_gte: BigInt
  trackingIndexScale_lte: BigInt
  trackingIndexScale_in: [BigInt!]
  trackingIndexScale_not_in: [BigInt!]
  baseTrackingSupplySpeed: BigInt
  baseTrackingSupplySpeed_not: BigInt
  baseTrackingSupplySpeed_gt: BigInt
  baseTrackingSupplySpeed_lt: BigInt
  baseTrackingSupplySpeed_gte: BigInt
  baseTrackingSupplySpeed_lte: BigInt
  baseTrackingSupplySpeed_in: [BigInt!]
  baseTrackingSupplySpeed_not_in: [BigInt!]
  baseTrackingBorrowSpeed: BigInt
  baseTrackingBorrowSpeed_not: BigInt
  baseTrackingBorrowSpeed_gt: BigInt
  baseTrackingBorrowSpeed_lt: BigInt
  baseTrackingBorrowSpeed_gte: BigInt
  baseTrackingBorrowSpeed_lte: BigInt
  baseTrackingBorrowSpeed_in: [BigInt!]
  baseTrackingBorrowSpeed_not_in: [BigInt!]
  baseMinForRewards: BigInt
  baseMinForRewards_not: BigInt
  baseMinForRewards_gt: BigInt
  baseMinForRewards_lt: BigInt
  baseMinForRewards_gte: BigInt
  baseMinForRewards_lte: BigInt
  baseMinForRewards_in: [BigInt!]
  baseMinForRewards_not_in: [BigInt!]
  baseBorrowMin: BigInt
  baseBorrowMin_not: BigInt
  baseBorrowMin_gt: BigInt
  baseBorrowMin_lt: BigInt
  baseBorrowMin_gte: BigInt
  baseBorrowMin_lte: BigInt
  baseBorrowMin_in: [BigInt!]
  baseBorrowMin_not_in: [BigInt!]
  targetReserves: BigInt
  targetReserves_not: BigInt
  targetReserves_gt: BigInt
  targetReserves_lt: BigInt
  targetReserves_gte: BigInt
  targetReserves_lte: BigInt
  targetReserves_in: [BigInt!]
  targetReserves_not_in: [BigInt!]
  baseToken: String
  baseToken_not: String
  baseToken_gt: String
  baseToken_lt: String
  baseToken_gte: String
  baseToken_lte: String
  baseToken_in: [String!]
  baseToken_not_in: [String!]
  baseToken_contains: String
  baseToken_contains_nocase: String
  baseToken_not_contains: String
  baseToken_not_contains_nocase: String
  baseToken_starts_with: String
  baseToken_starts_with_nocase: String
  baseToken_not_starts_with: String
  baseToken_not_starts_with_nocase: String
  baseToken_ends_with: String
  baseToken_ends_with_nocase: String
  baseToken_not_ends_with: String
  baseToken_not_ends_with_nocase: String
  baseToken_: BaseToken_filter
  collateralTokens: [String!]
  collateralTokens_not: [String!]
  collateralTokens_contains: [String!]
  collateralTokens_contains_nocase: [String!]
  collateralTokens_not_contains: [String!]
  collateralTokens_not_contains_nocase: [String!]
  collateralTokens_: CollateralToken_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum MarketConfiguration_orderBy {
  id
  market
  cometImplementation
  lastConfigurationUpdateBlockNumber
  name
  symbol
  factory
  governor
  pauseGuardian
  extensionDelegate
  supplyKink
  supplyPerSecondInterestRateSlopeLow
  supplyPerSecondInterestRateSlopeHigh
  supplyPerSecondInterestRateBase
  borrowKink
  borrowPerSecondInterestRateSlopeLow
  borrowPerSecondInterestRateSlopeHigh
  borrowPerSecondInterestRateBase
  storeFrontPriceFactor
  trackingIndexScale
  baseTrackingSupplySpeed
  baseTrackingBorrowSpeed
  baseMinForRewards
  baseBorrowMin
  targetReserves
  baseToken
  collateralTokens
}

type MarketDailyUsage {
  """
  Market ID + day
  """
  id: Bytes!
  """
  Days since unix epoch
  """
  day: BigInt!
  """
  Seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Market the usage is for
  """
  market: Market!
  """
  Usage snapshot from that day
  """
  usage: Usage!
}

input MarketDailyUsage_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  day: BigInt
  day_not: BigInt
  day_gt: BigInt
  day_lt: BigInt
  day_gte: BigInt
  day_lte: BigInt
  day_in: [BigInt!]
  day_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  usage: String
  usage_not: String
  usage_gt: String
  usage_lt: String
  usage_gte: String
  usage_lte: String
  usage_in: [String!]
  usage_not_in: [String!]
  usage_contains: String
  usage_contains_nocase: String
  usage_not_contains: String
  usage_not_contains_nocase: String
  usage_starts_with: String
  usage_starts_with_nocase: String
  usage_not_starts_with: String
  usage_not_starts_with_nocase: String
  usage_ends_with: String
  usage_ends_with_nocase: String
  usage_not_ends_with: String
  usage_not_ends_with_nocase: String
  usage_: Usage_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum MarketDailyUsage_orderBy {
  id
  day
  timestamp
  market
  usage
}

type MarketHourlyUsage {
  """
  Market ID + hour
  """
  id: Bytes!
  """
  Hours since unix epoch
  """
  hour: BigInt!
  """
  Seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Market the usage is for
  """
  market: Market!
  """
  Usage snapshot from that hour
  """
  usage: Usage!
}

input MarketHourlyUsage_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hour: BigInt
  hour_not: BigInt
  hour_gt: BigInt
  hour_lt: BigInt
  hour_gte: BigInt
  hour_lte: BigInt
  hour_in: [BigInt!]
  hour_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  usage: String
  usage_not: String
  usage_gt: String
  usage_lt: String
  usage_gte: String
  usage_lte: String
  usage_in: [String!]
  usage_not_in: [String!]
  usage_contains: String
  usage_contains_nocase: String
  usage_not_contains: String
  usage_not_contains_nocase: String
  usage_starts_with: String
  usage_starts_with_nocase: String
  usage_not_starts_with: String
  usage_not_starts_with_nocase: String
  usage_ends_with: String
  usage_ends_with_nocase: String
  usage_not_ends_with: String
  usage_not_ends_with_nocase: String
  usage_: Usage_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum MarketHourlyUsage_orderBy {
  id
  hour
  timestamp
  market
  usage
}

input Market_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  cometProxy: Bytes
  cometProxy_not: Bytes
  cometProxy_in: [Bytes!]
  cometProxy_not_in: [Bytes!]
  cometProxy_contains: Bytes
  cometProxy_not_contains: Bytes
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Protocol_filter
  creationBlockNumber: BigInt
  creationBlockNumber_not: BigInt
  creationBlockNumber_gt: BigInt
  creationBlockNumber_lt: BigInt
  creationBlockNumber_gte: BigInt
  creationBlockNumber_lte: BigInt
  creationBlockNumber_in: [BigInt!]
  creationBlockNumber_not_in: [BigInt!]
  configuration: String
  configuration_not: String
  configuration_gt: String
  configuration_lt: String
  configuration_gte: String
  configuration_lte: String
  configuration_in: [String!]
  configuration_not_in: [String!]
  configuration_contains: String
  configuration_contains_nocase: String
  configuration_not_contains: String
  configuration_not_contains_nocase: String
  configuration_starts_with: String
  configuration_starts_with_nocase: String
  configuration_not_starts_with: String
  configuration_not_starts_with_nocase: String
  configuration_ends_with: String
  configuration_ends_with_nocase: String
  configuration_not_ends_with: String
  configuration_not_ends_with_nocase: String
  configuration_: MarketConfiguration_filter
  accounting: String
  accounting_not: String
  accounting_gt: String
  accounting_lt: String
  accounting_gte: String
  accounting_lte: String
  accounting_in: [String!]
  accounting_not_in: [String!]
  accounting_contains: String
  accounting_contains_nocase: String
  accounting_not_contains: String
  accounting_not_contains_nocase: String
  accounting_starts_with: String
  accounting_starts_with_nocase: String
  accounting_not_starts_with: String
  accounting_not_starts_with_nocase: String
  accounting_ends_with: String
  accounting_ends_with_nocase: String
  accounting_not_ends_with: String
  accounting_not_ends_with_nocase: String
  accounting_: MarketAccounting_filter
  cumulativeUsage: String
  cumulativeUsage_not: String
  cumulativeUsage_gt: String
  cumulativeUsage_lt: String
  cumulativeUsage_gte: String
  cumulativeUsage_lte: String
  cumulativeUsage_in: [String!]
  cumulativeUsage_not_in: [String!]
  cumulativeUsage_contains: String
  cumulativeUsage_contains_nocase: String
  cumulativeUsage_not_contains: String
  cumulativeUsage_not_contains_nocase: String
  cumulativeUsage_starts_with: String
  cumulativeUsage_starts_with_nocase: String
  cumulativeUsage_not_starts_with: String
  cumulativeUsage_not_starts_with_nocase: String
  cumulativeUsage_ends_with: String
  cumulativeUsage_ends_with_nocase: String
  cumulativeUsage_not_ends_with: String
  cumulativeUsage_not_ends_with_nocase: String
  cumulativeUsage_: Usage_filter
  collateralBalances_: MarketCollateralBalance_filter
  positions_: Position_filter
  supplyBaseInteractions_: SupplyBaseInteraction_filter
  withdrawBaseInteractions_: WithdrawBaseInteraction_filter
  absorbDebtInteractions_: AbsorbDebtInteraction_filter
  supplyCollateralInteractions_: SupplyCollateralInteraction_filter
  withdrawCollateralInteractions_: WithdrawCollateralInteraction_filter
  transferCollateralInteractions_: TransferCollateralInteraction_filter
  absorbCollateralInteractions_: AbsorbCollateralInteraction_filter
  buyCollateralInteractions_: BuyCollateralInteraction_filter
  withdrawReservesInteractions_: WithdrawReservesInteraction_filter
  hourlyUsage_: MarketHourlyUsage_filter
  dailyUsage_: MarketDailyUsage_filter
  configurationSnapshots_: MarketConfigurationSnapshot_filter
  hourlyMarketAccounting_: HourlyMarketAccounting_filter
  dailyMarketAccounting_: DailyMarketAccounting_filter
  weeklyMarketAccounting_: WeeklyMarketAccounting_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum Market_orderBy {
  id
  cometProxy
  protocol
  creationBlockNumber
  configuration
  accounting
  cumulativeUsage
  collateralBalances
  positions
  supplyBaseInteractions
  withdrawBaseInteractions
  absorbDebtInteractions
  supplyCollateralInteractions
  withdrawCollateralInteractions
  transferCollateralInteractions
  absorbCollateralInteractions
  buyCollateralInteractions
  withdrawReservesInteractions
  hourlyUsage
  dailyUsage
  configurationSnapshots
  hourlyMarketAccounting
  dailyMarketAccounting
  weeklyMarketAccounting
}

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
  asc
  desc
}

type Position {
  """
  Market proxy address + owner address
  """
  id: Bytes!
  """
  Block number the position was created
  """
  creationBlockNumber: BigInt!
  """
  Market the position is in
  """
  market: Market!
  """
  Owner of the position
  """
  account: Account!
  """
  Current accounting of this position
  """
  accounting: PositionAccounting!
  """
  Current collateral balances of this position
  """
  collateralBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionCollateralBalance_orderBy
    orderDirection: OrderDirection
    where: PositionCollateralBalance_filter
  ): [PositionCollateralBalance!]!
  """
  All interactions where the base asset was supplied to this position, including those repaying loans
  """
  supplyBaseInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: SupplyBaseInteraction_orderBy
    orderDirection: OrderDirection
    where: SupplyBaseInteraction_filter
  ): [SupplyBaseInteraction!]!
  """
  All interactions where the base asset was withdraw from this position, including those taking loans
  """
  withdrawBaseInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawBaseInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawBaseInteraction_filter
  ): [WithdrawBaseInteraction!]!
  """
  All interactions where this position was liquidated
  """
  absorbDebtInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: AbsorbDebtInteraction_orderBy
    orderDirection: OrderDirection
    where: AbsorbDebtInteraction_filter
  ): [AbsorbDebtInteraction!]!
  """
  All interactions where a collateral asset was supplied to this position
  """
  supplyCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: SupplyCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: SupplyCollateralInteraction_filter
  ): [SupplyCollateralInteraction!]!
  """
  All interactions where a collateral asset was withdrawn from this position
  """
  withdrawCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawCollateralInteraction_filter
  ): [WithdrawCollateralInteraction!]!
  """
  All interactions where a collateral asset was transferred from this position
  """
  transferFromCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: TransferCollateralInteraction_filter
  ): [TransferCollateralInteraction!]!
  """
  All interactions where a collateral asset was transferred to this position
  """
  transferToCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: TransferCollateralInteraction_filter
  ): [TransferCollateralInteraction!]!
  """
  All interactions where a collateral asset was absorbed by the market during a liquidation of this position
  """
  absorbCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: AbsorbCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: AbsorbCollateralInteraction_filter
  ): [AbsorbCollateralInteraction!]!
  """
  Historical snapshots of position accounting changes, these only get taken when the position accounting changes (not periodically)
  """
  positionAccountingSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionAccountingSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionAccountingSnapshot_filter
  ): [PositionAccountingSnapshot!]
}

type PositionAccounting {
  """
  Position ID or block timestamp + log index for snapshots
  """
  id: Bytes!
  """
  Last block number that this accounting was updated
  """
  lastUpdatedBlockNumber: BigInt!
  """
  Position the accounting is for
  """
  position: Position!
  """
  Base principal of this position (+ for supply, - for borrow), this can be used to construct the most accurate balance using the market indices since position balances are only updated when the principal changes (supply, borrow, etc)
  """
  basePrincipal: BigInt!
  """
  Base balance of the position (from the last time it was updated, use basePrincipal and market indices for most accurate baseBalance)
  """
  baseBalance: BigInt!
  """
  Base tracking index for rewards for the position
  """
  baseTrackingIndex: BigInt!
  """
  Base tracking that this position has accrued
  """
  baseTrackingAccrued: BigInt!
  """
  Base balance in USD (+ for supply, - for borrow)
  """
  baseBalanceUsd: BigDecimal!
  """
  Collateral balance of the position in USD
  """
  collateralBalanceUsd: BigDecimal!
}

type PositionAccountingSnapshot {
  """
  Position ID + block number + log index. Note that position snapshots are only taken when the position changes (supply, borrow, liquidate, etc.), not periodically
  """
  id: Bytes!
  """
  Timestamp in seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Position the accounting is for
  """
  position: Position!
  """
  Accounting snapshot
  """
  accounting: PositionAccounting!
}

input PositionAccountingSnapshot_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  accounting: String
  accounting_not: String
  accounting_gt: String
  accounting_lt: String
  accounting_gte: String
  accounting_lte: String
  accounting_in: [String!]
  accounting_not_in: [String!]
  accounting_contains: String
  accounting_contains_nocase: String
  accounting_not_contains: String
  accounting_not_contains_nocase: String
  accounting_starts_with: String
  accounting_starts_with_nocase: String
  accounting_not_starts_with: String
  accounting_not_starts_with_nocase: String
  accounting_ends_with: String
  accounting_ends_with_nocase: String
  accounting_not_ends_with: String
  accounting_not_ends_with_nocase: String
  accounting_: PositionAccounting_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum PositionAccountingSnapshot_orderBy {
  id
  timestamp
  position
  accounting
}

input PositionAccounting_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  lastUpdatedBlockNumber: BigInt
  lastUpdatedBlockNumber_not: BigInt
  lastUpdatedBlockNumber_gt: BigInt
  lastUpdatedBlockNumber_lt: BigInt
  lastUpdatedBlockNumber_gte: BigInt
  lastUpdatedBlockNumber_lte: BigInt
  lastUpdatedBlockNumber_in: [BigInt!]
  lastUpdatedBlockNumber_not_in: [BigInt!]
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  basePrincipal: BigInt
  basePrincipal_not: BigInt
  basePrincipal_gt: BigInt
  basePrincipal_lt: BigInt
  basePrincipal_gte: BigInt
  basePrincipal_lte: BigInt
  basePrincipal_in: [BigInt!]
  basePrincipal_not_in: [BigInt!]
  baseBalance: BigInt
  baseBalance_not: BigInt
  baseBalance_gt: BigInt
  baseBalance_lt: BigInt
  baseBalance_gte: BigInt
  baseBalance_lte: BigInt
  baseBalance_in: [BigInt!]
  baseBalance_not_in: [BigInt!]
  baseTrackingIndex: BigInt
  baseTrackingIndex_not: BigInt
  baseTrackingIndex_gt: BigInt
  baseTrackingIndex_lt: BigInt
  baseTrackingIndex_gte: BigInt
  baseTrackingIndex_lte: BigInt
  baseTrackingIndex_in: [BigInt!]
  baseTrackingIndex_not_in: [BigInt!]
  baseTrackingAccrued: BigInt
  baseTrackingAccrued_not: BigInt
  baseTrackingAccrued_gt: BigInt
  baseTrackingAccrued_lt: BigInt
  baseTrackingAccrued_gte: BigInt
  baseTrackingAccrued_lte: BigInt
  baseTrackingAccrued_in: [BigInt!]
  baseTrackingAccrued_not_in: [BigInt!]
  baseBalanceUsd: BigDecimal
  baseBalanceUsd_not: BigDecimal
  baseBalanceUsd_gt: BigDecimal
  baseBalanceUsd_lt: BigDecimal
  baseBalanceUsd_gte: BigDecimal
  baseBalanceUsd_lte: BigDecimal
  baseBalanceUsd_in: [BigDecimal!]
  baseBalanceUsd_not_in: [BigDecimal!]
  collateralBalanceUsd: BigDecimal
  collateralBalanceUsd_not: BigDecimal
  collateralBalanceUsd_gt: BigDecimal
  collateralBalanceUsd_lt: BigDecimal
  collateralBalanceUsd_gte: BigDecimal
  collateralBalanceUsd_lte: BigDecimal
  collateralBalanceUsd_in: [BigDecimal!]
  collateralBalanceUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum PositionAccounting_orderBy {
  id
  lastUpdatedBlockNumber
  position
  basePrincipal
  baseBalance
  baseTrackingIndex
  baseTrackingAccrued
  baseBalanceUsd
  collateralBalanceUsd
}

type PositionCollateralBalance implements CollateralBalance {
  """
  Position id + collateral token ID
  """
  id: Bytes!
  """
  Block number the position collateral balance was created
  """
  creationBlockNumber: BigInt!
  """
  Collateral token the balance is for
  """
  collateralToken: CollateralToken!
  """
  Position balance is for
  """
  position: Position!
  """
  Last block number the balances and reserves were updated
  """
  lastUpdateBlockNumber: BigInt!
  """
  Balance of collateralToken
  """
  balance: BigInt!
  """
  Balance in USD of the collateral token
  """
  balanceUsd: BigDecimal!
}

input PositionCollateralBalance_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  creationBlockNumber: BigInt
  creationBlockNumber_not: BigInt
  creationBlockNumber_gt: BigInt
  creationBlockNumber_lt: BigInt
  creationBlockNumber_gte: BigInt
  creationBlockNumber_lte: BigInt
  creationBlockNumber_in: [BigInt!]
  creationBlockNumber_not_in: [BigInt!]
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  balanceUsd: BigDecimal
  balanceUsd_not: BigDecimal
  balanceUsd_gt: BigDecimal
  balanceUsd_lt: BigDecimal
  balanceUsd_gte: BigDecimal
  balanceUsd_lte: BigDecimal
  balanceUsd_in: [BigDecimal!]
  balanceUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum PositionCollateralBalance_orderBy {
  id
  creationBlockNumber
  collateralToken
  position
  lastUpdateBlockNumber
  balance
  balanceUsd
}

input Position_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  creationBlockNumber: BigInt
  creationBlockNumber_not: BigInt
  creationBlockNumber_gt: BigInt
  creationBlockNumber_lt: BigInt
  creationBlockNumber_gte: BigInt
  creationBlockNumber_lte: BigInt
  creationBlockNumber_in: [BigInt!]
  creationBlockNumber_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  accounting: String
  accounting_not: String
  accounting_gt: String
  accounting_lt: String
  accounting_gte: String
  accounting_lte: String
  accounting_in: [String!]
  accounting_not_in: [String!]
  accounting_contains: String
  accounting_contains_nocase: String
  accounting_not_contains: String
  accounting_not_contains_nocase: String
  accounting_starts_with: String
  accounting_starts_with_nocase: String
  accounting_not_starts_with: String
  accounting_not_starts_with_nocase: String
  accounting_ends_with: String
  accounting_ends_with_nocase: String
  accounting_not_ends_with: String
  accounting_not_ends_with_nocase: String
  accounting_: PositionAccounting_filter
  collateralBalances_: PositionCollateralBalance_filter
  supplyBaseInteractions_: SupplyBaseInteraction_filter
  withdrawBaseInteractions_: WithdrawBaseInteraction_filter
  absorbDebtInteractions_: AbsorbDebtInteraction_filter
  supplyCollateralInteractions_: SupplyCollateralInteraction_filter
  withdrawCollateralInteractions_: WithdrawCollateralInteraction_filter
  transferFromCollateralInteractions_: TransferCollateralInteraction_filter
  transferToCollateralInteractions_: TransferCollateralInteraction_filter
  absorbCollateralInteractions_: AbsorbCollateralInteraction_filter
  positionAccountingSnapshots_: PositionAccountingSnapshot_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum Position_orderBy {
  id
  creationBlockNumber
  market
  account
  accounting
  collateralBalances
  supplyBaseInteractions
  withdrawBaseInteractions
  absorbDebtInteractions
  supplyCollateralInteractions
  withdrawCollateralInteractions
  transferFromCollateralInteractions
  transferToCollateralInteractions
  absorbCollateralInteractions
  positionAccountingSnapshots
}

type Protocol {
  """
  Configurator proxy address
  """
  id: Bytes!
  """
  Configurator proxy address
  """
  configuratorProxy: Bytes!
  """
  Current address of the configurator implementation
  """
  configuratorImplementation: Bytes
  """
  Markets that exist in the protocol
  """
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
  ): [Market!]!
  """
  Current accounting for the whole protocol
  """
  accounting: ProtocolAccounting!
  """
  Current cumulative usage for the whole protocol
  """
  cumulativeUsage: Usage!
  """
  Historical snapshots of hourly protocol usage
  """
  hourlyUsage(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolHourlyUsage_orderBy
    orderDirection: OrderDirection
    where: ProtocolHourlyUsage_filter
  ): [ProtocolHourlyUsage!]!
  """
  Historical snapshots of daily protocol usage
  """
  dailyUsage(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolDailyUsage_orderBy
    orderDirection: OrderDirection
    where: ProtocolDailyUsage_filter
  ): [ProtocolDailyUsage!]!
  """
  Historical snapshots of hourly protocol accounting
  """
  hourlyProtocolAccounting(
    skip: Int = 0
    first: Int = 100
    orderBy: HourlyProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: HourlyProtocolAccounting_filter
  ): [HourlyProtocolAccounting!]!
  """
  Historical snapshots of daily protocol accounting
  """
  dailyProtocolAccounting(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: DailyProtocolAccounting_filter
  ): [DailyProtocolAccounting!]!
  """
  Historical snapshots of weekly protocol accounting
  """
  weeklyProtocolAccounting(
    skip: Int = 0
    first: Int = 100
    orderBy: WeeklyProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: WeeklyProtocolAccounting_filter
  ): [WeeklyProtocolAccounting!]!
}

type ProtocolAccounting {
  """
  Protocol ID + hour number for snapshots
  """
  id: Bytes!
  """
  Protocol the accounting is for
  """
  protocol: Protocol!
  """
  Last block the accounting was updated
  """
  lastUpdatedBlock: BigInt!
  """
  Total amount supplied in USD to the protocol
  """
  totalSupplyUsd: BigDecimal!
  """
  Total amount borrowed in USD from the protocol
  """
  totalBorrowUsd: BigDecimal!
  """
  Total base assets reserve balance in USD of protocol
  """
  reserveBalanceUsd: BigDecimal!
  """
  Total collateral balance in USD of the protocol
  """
  collateralBalanceUsd: BigDecimal!
  """
  Total collateral reserve balance in USD of the protocol
  """
  collateralReservesBalanceUsd: BigDecimal!
  """
  Total reserve balance in USD of the protocol (base reserves + collateral reserves)
  """
  totalReserveBalanceUsd: BigDecimal!
  """
  Utilization percent of the protocol (totalBorrowUsd / totalSupplyUsd)
  """
  utilization: BigDecimal!
  """
  Collateralization percent of the protocol (totalSupplyUsd / totalBorrowUsd, or 1 / utilization)
  """
  collateralization: BigDecimal!
  """
  Average base supply APR of the protocol (average over all markets)
  """
  avgSupplyApr: BigDecimal!
  """
  Average base borrow APR of the protocol (average over all markets)
  """
  avgBorrowApr: BigDecimal!
  """
  Average reward supply APR of the protocol (average over all markets)
  """
  avgRewardSupplyApr: BigDecimal!
  """
  Average reward borrow APR of the protocol (average over all markets)
  """
  avgRewardBorrowApr: BigDecimal!
  """
  Average net supply APR of the protocol (avgSupplyApr + avgRewardSupplyApy)
  """
  avgNetSupplyApr: BigDecimal!
  """
  Average net borrow APR of the protocol (avgBorrowApr - avgRewardBorrowApr)
  """
  avgNetBorrowApr: BigDecimal!
}

input ProtocolAccounting_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Protocol_filter
  lastUpdatedBlock: BigInt
  lastUpdatedBlock_not: BigInt
  lastUpdatedBlock_gt: BigInt
  lastUpdatedBlock_lt: BigInt
  lastUpdatedBlock_gte: BigInt
  lastUpdatedBlock_lte: BigInt
  lastUpdatedBlock_in: [BigInt!]
  lastUpdatedBlock_not_in: [BigInt!]
  totalSupplyUsd: BigDecimal
  totalSupplyUsd_not: BigDecimal
  totalSupplyUsd_gt: BigDecimal
  totalSupplyUsd_lt: BigDecimal
  totalSupplyUsd_gte: BigDecimal
  totalSupplyUsd_lte: BigDecimal
  totalSupplyUsd_in: [BigDecimal!]
  totalSupplyUsd_not_in: [BigDecimal!]
  totalBorrowUsd: BigDecimal
  totalBorrowUsd_not: BigDecimal
  totalBorrowUsd_gt: BigDecimal
  totalBorrowUsd_lt: BigDecimal
  totalBorrowUsd_gte: BigDecimal
  totalBorrowUsd_lte: BigDecimal
  totalBorrowUsd_in: [BigDecimal!]
  totalBorrowUsd_not_in: [BigDecimal!]
  reserveBalanceUsd: BigDecimal
  reserveBalanceUsd_not: BigDecimal
  reserveBalanceUsd_gt: BigDecimal
  reserveBalanceUsd_lt: BigDecimal
  reserveBalanceUsd_gte: BigDecimal
  reserveBalanceUsd_lte: BigDecimal
  reserveBalanceUsd_in: [BigDecimal!]
  reserveBalanceUsd_not_in: [BigDecimal!]
  collateralBalanceUsd: BigDecimal
  collateralBalanceUsd_not: BigDecimal
  collateralBalanceUsd_gt: BigDecimal
  collateralBalanceUsd_lt: BigDecimal
  collateralBalanceUsd_gte: BigDecimal
  collateralBalanceUsd_lte: BigDecimal
  collateralBalanceUsd_in: [BigDecimal!]
  collateralBalanceUsd_not_in: [BigDecimal!]
  collateralReservesBalanceUsd: BigDecimal
  collateralReservesBalanceUsd_not: BigDecimal
  collateralReservesBalanceUsd_gt: BigDecimal
  collateralReservesBalanceUsd_lt: BigDecimal
  collateralReservesBalanceUsd_gte: BigDecimal
  collateralReservesBalanceUsd_lte: BigDecimal
  collateralReservesBalanceUsd_in: [BigDecimal!]
  collateralReservesBalanceUsd_not_in: [BigDecimal!]
  totalReserveBalanceUsd: BigDecimal
  totalReserveBalanceUsd_not: BigDecimal
  totalReserveBalanceUsd_gt: BigDecimal
  totalReserveBalanceUsd_lt: BigDecimal
  totalReserveBalanceUsd_gte: BigDecimal
  totalReserveBalanceUsd_lte: BigDecimal
  totalReserveBalanceUsd_in: [BigDecimal!]
  totalReserveBalanceUsd_not_in: [BigDecimal!]
  utilization: BigDecimal
  utilization_not: BigDecimal
  utilization_gt: BigDecimal
  utilization_lt: BigDecimal
  utilization_gte: BigDecimal
  utilization_lte: BigDecimal
  utilization_in: [BigDecimal!]
  utilization_not_in: [BigDecimal!]
  collateralization: BigDecimal
  collateralization_not: BigDecimal
  collateralization_gt: BigDecimal
  collateralization_lt: BigDecimal
  collateralization_gte: BigDecimal
  collateralization_lte: BigDecimal
  collateralization_in: [BigDecimal!]
  collateralization_not_in: [BigDecimal!]
  avgSupplyApr: BigDecimal
  avgSupplyApr_not: BigDecimal
  avgSupplyApr_gt: BigDecimal
  avgSupplyApr_lt: BigDecimal
  avgSupplyApr_gte: BigDecimal
  avgSupplyApr_lte: BigDecimal
  avgSupplyApr_in: [BigDecimal!]
  avgSupplyApr_not_in: [BigDecimal!]
  avgBorrowApr: BigDecimal
  avgBorrowApr_not: BigDecimal
  avgBorrowApr_gt: BigDecimal
  avgBorrowApr_lt: BigDecimal
  avgBorrowApr_gte: BigDecimal
  avgBorrowApr_lte: BigDecimal
  avgBorrowApr_in: [BigDecimal!]
  avgBorrowApr_not_in: [BigDecimal!]
  avgRewardSupplyApr: BigDecimal
  avgRewardSupplyApr_not: BigDecimal
  avgRewardSupplyApr_gt: BigDecimal
  avgRewardSupplyApr_lt: BigDecimal
  avgRewardSupplyApr_gte: BigDecimal
  avgRewardSupplyApr_lte: BigDecimal
  avgRewardSupplyApr_in: [BigDecimal!]
  avgRewardSupplyApr_not_in: [BigDecimal!]
  avgRewardBorrowApr: BigDecimal
  avgRewardBorrowApr_not: BigDecimal
  avgRewardBorrowApr_gt: BigDecimal
  avgRewardBorrowApr_lt: BigDecimal
  avgRewardBorrowApr_gte: BigDecimal
  avgRewardBorrowApr_lte: BigDecimal
  avgRewardBorrowApr_in: [BigDecimal!]
  avgRewardBorrowApr_not_in: [BigDecimal!]
  avgNetSupplyApr: BigDecimal
  avgNetSupplyApr_not: BigDecimal
  avgNetSupplyApr_gt: BigDecimal
  avgNetSupplyApr_lt: BigDecimal
  avgNetSupplyApr_gte: BigDecimal
  avgNetSupplyApr_lte: BigDecimal
  avgNetSupplyApr_in: [BigDecimal!]
  avgNetSupplyApr_not_in: [BigDecimal!]
  avgNetBorrowApr: BigDecimal
  avgNetBorrowApr_not: BigDecimal
  avgNetBorrowApr_gt: BigDecimal
  avgNetBorrowApr_lt: BigDecimal
  avgNetBorrowApr_gte: BigDecimal
  avgNetBorrowApr_lte: BigDecimal
  avgNetBorrowApr_in: [BigDecimal!]
  avgNetBorrowApr_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum ProtocolAccounting_orderBy {
  id
  protocol
  lastUpdatedBlock
  totalSupplyUsd
  totalBorrowUsd
  reserveBalanceUsd
  collateralBalanceUsd
  collateralReservesBalanceUsd
  totalReserveBalanceUsd
  utilization
  collateralization
  avgSupplyApr
  avgBorrowApr
  avgRewardSupplyApr
  avgRewardBorrowApr
  avgNetSupplyApr
  avgNetBorrowApr
}

type ProtocolDailyUsage {
  """
  Day
  """
  id: Bytes!
  """
  Days since unix epoch
  """
  day: BigInt!
  """
  Seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Protocol the usage is for
  """
  protocol: Protocol!
  """
  Usage snapshot from that day
  """
  usage: Usage!
}

input ProtocolDailyUsage_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  day: BigInt
  day_not: BigInt
  day_gt: BigInt
  day_lt: BigInt
  day_gte: BigInt
  day_lte: BigInt
  day_in: [BigInt!]
  day_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Protocol_filter
  usage: String
  usage_not: String
  usage_gt: String
  usage_lt: String
  usage_gte: String
  usage_lte: String
  usage_in: [String!]
  usage_not_in: [String!]
  usage_contains: String
  usage_contains_nocase: String
  usage_not_contains: String
  usage_not_contains_nocase: String
  usage_starts_with: String
  usage_starts_with_nocase: String
  usage_not_starts_with: String
  usage_not_starts_with_nocase: String
  usage_ends_with: String
  usage_ends_with_nocase: String
  usage_not_ends_with: String
  usage_not_ends_with_nocase: String
  usage_: Usage_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum ProtocolDailyUsage_orderBy {
  id
  day
  timestamp
  protocol
  usage
}

type ProtocolHourlyUsage {
  """
  Hour
  """
  id: Bytes!
  """
  Hours since unix epoch
  """
  hour: BigInt!
  """
  Seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Protocol the usage is for
  """
  protocol: Protocol!
  """
  Usage snapshot from that hour
  """
  usage: Usage!
}

input ProtocolHourlyUsage_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hour: BigInt
  hour_not: BigInt
  hour_gt: BigInt
  hour_lt: BigInt
  hour_gte: BigInt
  hour_lte: BigInt
  hour_in: [BigInt!]
  hour_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Protocol_filter
  usage: String
  usage_not: String
  usage_gt: String
  usage_lt: String
  usage_gte: String
  usage_lte: String
  usage_in: [String!]
  usage_not_in: [String!]
  usage_contains: String
  usage_contains_nocase: String
  usage_not_contains: String
  usage_not_contains_nocase: String
  usage_starts_with: String
  usage_starts_with_nocase: String
  usage_not_starts_with: String
  usage_not_starts_with_nocase: String
  usage_ends_with: String
  usage_ends_with_nocase: String
  usage_not_ends_with: String
  usage_not_ends_with_nocase: String
  usage_: Usage_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum ProtocolHourlyUsage_orderBy {
  id
  hour
  timestamp
  protocol
  usage
}

input Protocol_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  configuratorProxy: Bytes
  configuratorProxy_not: Bytes
  configuratorProxy_in: [Bytes!]
  configuratorProxy_not_in: [Bytes!]
  configuratorProxy_contains: Bytes
  configuratorProxy_not_contains: Bytes
  configuratorImplementation: Bytes
  configuratorImplementation_not: Bytes
  configuratorImplementation_in: [Bytes!]
  configuratorImplementation_not_in: [Bytes!]
  configuratorImplementation_contains: Bytes
  configuratorImplementation_not_contains: Bytes
  markets: [String!]
  markets_not: [String!]
  markets_contains: [String!]
  markets_contains_nocase: [String!]
  markets_not_contains: [String!]
  markets_not_contains_nocase: [String!]
  markets_: Market_filter
  accounting: String
  accounting_not: String
  accounting_gt: String
  accounting_lt: String
  accounting_gte: String
  accounting_lte: String
  accounting_in: [String!]
  accounting_not_in: [String!]
  accounting_contains: String
  accounting_contains_nocase: String
  accounting_not_contains: String
  accounting_not_contains_nocase: String
  accounting_starts_with: String
  accounting_starts_with_nocase: String
  accounting_not_starts_with: String
  accounting_not_starts_with_nocase: String
  accounting_ends_with: String
  accounting_ends_with_nocase: String
  accounting_not_ends_with: String
  accounting_not_ends_with_nocase: String
  accounting_: ProtocolAccounting_filter
  cumulativeUsage: String
  cumulativeUsage_not: String
  cumulativeUsage_gt: String
  cumulativeUsage_lt: String
  cumulativeUsage_gte: String
  cumulativeUsage_lte: String
  cumulativeUsage_in: [String!]
  cumulativeUsage_not_in: [String!]
  cumulativeUsage_contains: String
  cumulativeUsage_contains_nocase: String
  cumulativeUsage_not_contains: String
  cumulativeUsage_not_contains_nocase: String
  cumulativeUsage_starts_with: String
  cumulativeUsage_starts_with_nocase: String
  cumulativeUsage_not_starts_with: String
  cumulativeUsage_not_starts_with_nocase: String
  cumulativeUsage_ends_with: String
  cumulativeUsage_ends_with_nocase: String
  cumulativeUsage_not_ends_with: String
  cumulativeUsage_not_ends_with_nocase: String
  cumulativeUsage_: Usage_filter
  hourlyUsage_: ProtocolHourlyUsage_filter
  dailyUsage_: ProtocolDailyUsage_filter
  hourlyProtocolAccounting_: HourlyProtocolAccounting_filter
  dailyProtocolAccounting_: DailyProtocolAccounting_filter
  weeklyProtocolAccounting_: WeeklyProtocolAccounting_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum Protocol_orderBy {
  id
  configuratorProxy
  configuratorImplementation
  markets
  accounting
  cumulativeUsage
  hourlyUsage
  dailyUsage
  hourlyProtocolAccounting
  dailyProtocolAccounting
  weeklyProtocolAccounting
}

type Query {
  protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  marketConfiguration(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketConfiguration
  marketConfigurations(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketConfiguration_orderBy
    orderDirection: OrderDirection
    where: MarketConfiguration_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketConfiguration!]!
  protocolAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolAccounting
  protocolAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: ProtocolAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolAccounting!]!
  marketAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketAccounting
  marketAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketAccounting_orderBy
    orderDirection: OrderDirection
    where: MarketAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketAccounting!]!
  positionAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionAccounting
  positionAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionAccounting_orderBy
    orderDirection: OrderDirection
    where: PositionAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionAccounting!]!
  usage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Usage
  usages(
    skip: Int = 0
    first: Int = 100
    orderBy: Usage_orderBy
    orderDirection: OrderDirection
    where: Usage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Usage!]!
  hourlyProtocolAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourlyProtocolAccounting
  hourlyProtocolAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: HourlyProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: HourlyProtocolAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourlyProtocolAccounting!]!
  dailyProtocolAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DailyProtocolAccounting
  dailyProtocolAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: DailyProtocolAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DailyProtocolAccounting!]!
  weeklyProtocolAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WeeklyProtocolAccounting
  weeklyProtocolAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: WeeklyProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: WeeklyProtocolAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WeeklyProtocolAccounting!]!
  marketConfigurationSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketConfigurationSnapshot
  marketConfigurationSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketConfigurationSnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketConfigurationSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketConfigurationSnapshot!]!
  hourlyMarketAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourlyMarketAccounting
  hourlyMarketAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: HourlyMarketAccounting_orderBy
    orderDirection: OrderDirection
    where: HourlyMarketAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourlyMarketAccounting!]!
  dailyMarketAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DailyMarketAccounting
  dailyMarketAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyMarketAccounting_orderBy
    orderDirection: OrderDirection
    where: DailyMarketAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DailyMarketAccounting!]!
  weeklyMarketAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WeeklyMarketAccounting
  weeklyMarketAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: WeeklyMarketAccounting_orderBy
    orderDirection: OrderDirection
    where: WeeklyMarketAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WeeklyMarketAccounting!]!
  positionAccountingSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionAccountingSnapshot
  positionAccountingSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionAccountingSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionAccountingSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionAccountingSnapshot!]!
  protocolHourlyUsage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolHourlyUsage
  protocolHourlyUsages(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolHourlyUsage_orderBy
    orderDirection: OrderDirection
    where: ProtocolHourlyUsage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolHourlyUsage!]!
  protocolDailyUsage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolDailyUsage
  protocolDailyUsages(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolDailyUsage_orderBy
    orderDirection: OrderDirection
    where: ProtocolDailyUsage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolDailyUsage!]!
  marketHourlyUsage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketHourlyUsage
  marketHourlyUsages(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketHourlyUsage_orderBy
    orderDirection: OrderDirection
    where: MarketHourlyUsage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketHourlyUsage!]!
  marketDailyUsage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketDailyUsage
  marketDailyUsages(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketDailyUsage_orderBy
    orderDirection: OrderDirection
    where: MarketDailyUsage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketDailyUsage!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  baseToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BaseToken
  baseTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: BaseToken_orderBy
    orderDirection: OrderDirection
    where: BaseToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BaseToken!]!
  collateralToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralToken
  collateralTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralToken_orderBy
    orderDirection: OrderDirection
    where: CollateralToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralToken!]!
  marketCollateralBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketCollateralBalance
  marketCollateralBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketCollateralBalance_orderBy
    orderDirection: OrderDirection
    where: MarketCollateralBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketCollateralBalance!]!
  positionCollateralBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionCollateralBalance
  positionCollateralBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionCollateralBalance_orderBy
    orderDirection: OrderDirection
    where: PositionCollateralBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionCollateralBalance!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _ActiveAccount
  activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: _ActiveAccount_orderBy
    orderDirection: OrderDirection
    where: _ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_ActiveAccount!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  supplyBaseInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SupplyBaseInteraction
  supplyBaseInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: SupplyBaseInteraction_orderBy
    orderDirection: OrderDirection
    where: SupplyBaseInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SupplyBaseInteraction!]!
  withdrawBaseInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawBaseInteraction
  withdrawBaseInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawBaseInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawBaseInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawBaseInteraction!]!
  absorbDebtInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AbsorbDebtInteraction
  absorbDebtInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: AbsorbDebtInteraction_orderBy
    orderDirection: OrderDirection
    where: AbsorbDebtInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AbsorbDebtInteraction!]!
  supplyCollateralInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SupplyCollateralInteraction
  supplyCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: SupplyCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: SupplyCollateralInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SupplyCollateralInteraction!]!
  withdrawCollateralInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawCollateralInteraction
  withdrawCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawCollateralInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawCollateralInteraction!]!
  transferCollateralInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferCollateralInteraction
  transferCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: TransferCollateralInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransferCollateralInteraction!]!
  absorbCollateralInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AbsorbCollateralInteraction
  absorbCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: AbsorbCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: AbsorbCollateralInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AbsorbCollateralInteraction!]!
  buyCollateralInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BuyCollateralInteraction
  buyCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: BuyCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: BuyCollateralInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BuyCollateralInteraction!]!
  withdrawReservesInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawReservesInteraction
  withdrawReservesInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawReservesInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawReservesInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawReservesInteraction!]!
  claimRewardsInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimRewardsInteraction
  claimRewardsInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimRewardsInteraction_orderBy
    orderDirection: OrderDirection
    where: ClaimRewardsInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimRewardsInteraction!]!
  collateralBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralBalance
  collateralBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralBalance_orderBy
    orderDirection: OrderDirection
    where: CollateralBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralBalance!]!
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
}

type Subscription {
  protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  marketConfiguration(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketConfiguration
  marketConfigurations(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketConfiguration_orderBy
    orderDirection: OrderDirection
    where: MarketConfiguration_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketConfiguration!]!
  protocolAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolAccounting
  protocolAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: ProtocolAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolAccounting!]!
  marketAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketAccounting
  marketAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketAccounting_orderBy
    orderDirection: OrderDirection
    where: MarketAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketAccounting!]!
  positionAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionAccounting
  positionAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionAccounting_orderBy
    orderDirection: OrderDirection
    where: PositionAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionAccounting!]!
  usage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Usage
  usages(
    skip: Int = 0
    first: Int = 100
    orderBy: Usage_orderBy
    orderDirection: OrderDirection
    where: Usage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Usage!]!
  hourlyProtocolAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourlyProtocolAccounting
  hourlyProtocolAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: HourlyProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: HourlyProtocolAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourlyProtocolAccounting!]!
  dailyProtocolAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DailyProtocolAccounting
  dailyProtocolAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: DailyProtocolAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DailyProtocolAccounting!]!
  weeklyProtocolAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WeeklyProtocolAccounting
  weeklyProtocolAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: WeeklyProtocolAccounting_orderBy
    orderDirection: OrderDirection
    where: WeeklyProtocolAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WeeklyProtocolAccounting!]!
  marketConfigurationSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketConfigurationSnapshot
  marketConfigurationSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketConfigurationSnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketConfigurationSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketConfigurationSnapshot!]!
  hourlyMarketAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HourlyMarketAccounting
  hourlyMarketAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: HourlyMarketAccounting_orderBy
    orderDirection: OrderDirection
    where: HourlyMarketAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HourlyMarketAccounting!]!
  dailyMarketAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DailyMarketAccounting
  dailyMarketAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: DailyMarketAccounting_orderBy
    orderDirection: OrderDirection
    where: DailyMarketAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DailyMarketAccounting!]!
  weeklyMarketAccounting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WeeklyMarketAccounting
  weeklyMarketAccountings(
    skip: Int = 0
    first: Int = 100
    orderBy: WeeklyMarketAccounting_orderBy
    orderDirection: OrderDirection
    where: WeeklyMarketAccounting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WeeklyMarketAccounting!]!
  positionAccountingSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionAccountingSnapshot
  positionAccountingSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionAccountingSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionAccountingSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionAccountingSnapshot!]!
  protocolHourlyUsage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolHourlyUsage
  protocolHourlyUsages(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolHourlyUsage_orderBy
    orderDirection: OrderDirection
    where: ProtocolHourlyUsage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolHourlyUsage!]!
  protocolDailyUsage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolDailyUsage
  protocolDailyUsages(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolDailyUsage_orderBy
    orderDirection: OrderDirection
    where: ProtocolDailyUsage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolDailyUsage!]!
  marketHourlyUsage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketHourlyUsage
  marketHourlyUsages(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketHourlyUsage_orderBy
    orderDirection: OrderDirection
    where: MarketHourlyUsage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketHourlyUsage!]!
  marketDailyUsage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketDailyUsage
  marketDailyUsages(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketDailyUsage_orderBy
    orderDirection: OrderDirection
    where: MarketDailyUsage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketDailyUsage!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  baseToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BaseToken
  baseTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: BaseToken_orderBy
    orderDirection: OrderDirection
    where: BaseToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BaseToken!]!
  collateralToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralToken
  collateralTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralToken_orderBy
    orderDirection: OrderDirection
    where: CollateralToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralToken!]!
  marketCollateralBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketCollateralBalance
  marketCollateralBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketCollateralBalance_orderBy
    orderDirection: OrderDirection
    where: MarketCollateralBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketCollateralBalance!]!
  positionCollateralBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionCollateralBalance
  positionCollateralBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionCollateralBalance_orderBy
    orderDirection: OrderDirection
    where: PositionCollateralBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionCollateralBalance!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _ActiveAccount
  activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: _ActiveAccount_orderBy
    orderDirection: OrderDirection
    where: _ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_ActiveAccount!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  supplyBaseInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SupplyBaseInteraction
  supplyBaseInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: SupplyBaseInteraction_orderBy
    orderDirection: OrderDirection
    where: SupplyBaseInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SupplyBaseInteraction!]!
  withdrawBaseInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawBaseInteraction
  withdrawBaseInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawBaseInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawBaseInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawBaseInteraction!]!
  absorbDebtInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AbsorbDebtInteraction
  absorbDebtInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: AbsorbDebtInteraction_orderBy
    orderDirection: OrderDirection
    where: AbsorbDebtInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AbsorbDebtInteraction!]!
  supplyCollateralInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SupplyCollateralInteraction
  supplyCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: SupplyCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: SupplyCollateralInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SupplyCollateralInteraction!]!
  withdrawCollateralInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawCollateralInteraction
  withdrawCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawCollateralInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawCollateralInteraction!]!
  transferCollateralInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferCollateralInteraction
  transferCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: TransferCollateralInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransferCollateralInteraction!]!
  absorbCollateralInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AbsorbCollateralInteraction
  absorbCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: AbsorbCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: AbsorbCollateralInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AbsorbCollateralInteraction!]!
  buyCollateralInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BuyCollateralInteraction
  buyCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: BuyCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: BuyCollateralInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BuyCollateralInteraction!]!
  withdrawReservesInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawReservesInteraction
  withdrawReservesInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawReservesInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawReservesInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawReservesInteraction!]!
  claimRewardsInteraction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimRewardsInteraction
  claimRewardsInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimRewardsInteraction_orderBy
    orderDirection: OrderDirection
    where: ClaimRewardsInteraction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimRewardsInteraction!]!
  collateralBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralBalance
  collateralBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralBalance_orderBy
    orderDirection: OrderDirection
    where: CollateralBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralBalance!]!
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
}

type SupplyBaseInteraction {
  """
  Transaction ID + event log index
  """
  id: Bytes!
  """
  Transaction this interaction is part of
  """
  transaction: Transaction!
  """
  Market the interaction is with
  """
  market: Market!
  """
  Market the interaction changes
  """
  position: Position!
  """
  Supplied of funds
  """
  supplier: Bytes!
  """
  Asset being supplied
  """
  asset: BaseToken!
  """
  Amount being supplied
  """
  amount: BigInt!
  """
  Amount being supplied in USD
  """
  amountUsd: BigDecimal!
}

input SupplyBaseInteraction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  supplier: Bytes
  supplier_not: Bytes
  supplier_in: [Bytes!]
  supplier_not_in: [Bytes!]
  supplier_contains: Bytes
  supplier_not_contains: Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: BaseToken_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigDecimal
  amountUsd_not: BigDecimal
  amountUsd_gt: BigDecimal
  amountUsd_lt: BigDecimal
  amountUsd_gte: BigDecimal
  amountUsd_lte: BigDecimal
  amountUsd_in: [BigDecimal!]
  amountUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum SupplyBaseInteraction_orderBy {
  id
  transaction
  market
  position
  supplier
  asset
  amount
  amountUsd
}

type SupplyCollateralInteraction {
  """
  Transaction ID + event log index
  """
  id: Bytes!
  """
  Transaction this interaction is part of
  """
  transaction: Transaction!
  """
  Market the interaction is with
  """
  market: Market!
  """
  Position the interaction is with
  """
  position: Position!
  """
  Supplier of the collateral
  """
  supplier: Bytes!
  """
  Asset being supplied
  """
  asset: CollateralToken!
  """
  Amount supplied
  """
  amount: BigInt!
  """
  Amount supplied in USD
  """
  amountUsd: BigDecimal!
}

input SupplyCollateralInteraction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  supplier: Bytes
  supplier_not: Bytes
  supplier_in: [Bytes!]
  supplier_not_in: [Bytes!]
  supplier_contains: Bytes
  supplier_not_contains: Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: CollateralToken_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigDecimal
  amountUsd_not: BigDecimal
  amountUsd_gt: BigDecimal
  amountUsd_lt: BigDecimal
  amountUsd_gte: BigDecimal
  amountUsd_lte: BigDecimal
  amountUsd_in: [BigDecimal!]
  amountUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum SupplyCollateralInteraction_orderBy {
  id
  transaction
  market
  position
  supplier
  asset
  amount
  amountUsd
}

type Token {
  """
  Token address
  """
  id: Bytes!
  """
  Token address
  """
  address: Bytes!
  """
  Token name
  """
  name: String!
  """
  Token symbol
  """
  symbol: String!
  """
  Token decimals
  """
  decimals: Int
  """
  Last token price in USD
  """
  lastPriceUsd: BigDecimal!
  """
  Block of the last token price update
  """
  lastPriceBlockNumber: BigInt!
}

input Token_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  lastPriceUsd: BigDecimal
  lastPriceUsd_not: BigDecimal
  lastPriceUsd_gt: BigDecimal
  lastPriceUsd_lt: BigDecimal
  lastPriceUsd_gte: BigDecimal
  lastPriceUsd_lte: BigDecimal
  lastPriceUsd_in: [BigDecimal!]
  lastPriceUsd_not_in: [BigDecimal!]
  lastPriceBlockNumber: BigInt
  lastPriceBlockNumber_not: BigInt
  lastPriceBlockNumber_gt: BigInt
  lastPriceBlockNumber_lt: BigInt
  lastPriceBlockNumber_gte: BigInt
  lastPriceBlockNumber_lte: BigInt
  lastPriceBlockNumber_in: [BigInt!]
  lastPriceBlockNumber_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum Token_orderBy {
  id
  address
  name
  symbol
  decimals
  lastPriceUsd
  lastPriceBlockNumber
}

type Transaction {
  """
  Transaction hash
  """
  id: Bytes!
  """
  Transaction hash
  """
  hash: Bytes!
  """
  Block number transaction is part of
  """
  blockNumber: BigInt!
  """
  Timestamp of the transaction
  """
  timestamp: BigInt!
  """
  Address the transaction is from
  """
  from: Bytes!
  """
  Address the transaction is to
  """
  to: Bytes
  """
  Gas limit for the transaction
  """
  gasLimit: BigInt!
  """
  Gas price for the transaction
  """
  gasPrice: BigInt!
  """
  Amount of gas used
  """
  gasUsed: BigInt
  """
  Amount of gas used in USD
  """
  gasUsedUsd: BigDecimal
  supplyBaseInteractionCount: Int!
  withdrawBaseInteractionCount: Int!
  absorbDebtInteractionCount: Int!
  supplyCollateralInteractionCount: Int!
  withdrawCollateralInteractionCount: Int!
  transferCollateralInteractionCount: Int!
  absorbCollateralInteractionCount: Int!
  buyCollateralInteractionCount: Int!
  withdrawReservesInteractionCount: Int!
  claimRewardsInteractionCount: Int!
  """
  All supply base interaction that were part of this transaction
  """
  supplyBaseInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: SupplyBaseInteraction_orderBy
    orderDirection: OrderDirection
    where: SupplyBaseInteraction_filter
  ): [SupplyBaseInteraction!]!
  """
  All withdraw base interaction that were part of this transaction
  """
  withdrawBaseInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawBaseInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawBaseInteraction_filter
  ): [WithdrawBaseInteraction!]!
  """
  All absorb debt interaction that were part of this transaction
  """
  absorbDebtInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: AbsorbDebtInteraction_orderBy
    orderDirection: OrderDirection
    where: AbsorbDebtInteraction_filter
  ): [AbsorbDebtInteraction!]!
  """
  All supply collateral interaction that were part of this transaction
  """
  supplyCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: SupplyCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: SupplyCollateralInteraction_filter
  ): [SupplyCollateralInteraction!]!
  """
  All withdraw collateral interaction that were part of this transaction
  """
  withdrawCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawCollateralInteraction_filter
  ): [WithdrawCollateralInteraction!]!
  """
  All transfer collateral interaction that were part of this transaction
  """
  transferCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: TransferCollateralInteraction_filter
  ): [TransferCollateralInteraction!]!
  """
  All absorb collateral interaction that were part of this transaction
  """
  absorbCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: AbsorbCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: AbsorbCollateralInteraction_filter
  ): [AbsorbCollateralInteraction!]!
  """
  All buy collateral interaction that were part of this transaction
  """
  buyCollateralInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: BuyCollateralInteraction_orderBy
    orderDirection: OrderDirection
    where: BuyCollateralInteraction_filter
  ): [BuyCollateralInteraction!]!
  """
  All withdraw reserves interaction that were part of this transaction
  """
  withdrawReservesInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawReservesInteraction_orderBy
    orderDirection: OrderDirection
    where: WithdrawReservesInteraction_filter
  ): [WithdrawReservesInteraction!]!
  """
  All claim rewards interaction that were part of this transaction
  """
  claimRewardsInteractions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimRewardsInteraction_orderBy
    orderDirection: OrderDirection
    where: ClaimRewardsInteraction_filter
  ): [ClaimRewardsInteraction!]!
}

input Transaction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hash: Bytes
  hash_not: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  from: Bytes
  from_not: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  to: Bytes
  to_not: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasUsedUsd: BigDecimal
  gasUsedUsd_not: BigDecimal
  gasUsedUsd_gt: BigDecimal
  gasUsedUsd_lt: BigDecimal
  gasUsedUsd_gte: BigDecimal
  gasUsedUsd_lte: BigDecimal
  gasUsedUsd_in: [BigDecimal!]
  gasUsedUsd_not_in: [BigDecimal!]
  supplyBaseInteractionCount: Int
  supplyBaseInteractionCount_not: Int
  supplyBaseInteractionCount_gt: Int
  supplyBaseInteractionCount_lt: Int
  supplyBaseInteractionCount_gte: Int
  supplyBaseInteractionCount_lte: Int
  supplyBaseInteractionCount_in: [Int!]
  supplyBaseInteractionCount_not_in: [Int!]
  withdrawBaseInteractionCount: Int
  withdrawBaseInteractionCount_not: Int
  withdrawBaseInteractionCount_gt: Int
  withdrawBaseInteractionCount_lt: Int
  withdrawBaseInteractionCount_gte: Int
  withdrawBaseInteractionCount_lte: Int
  withdrawBaseInteractionCount_in: [Int!]
  withdrawBaseInteractionCount_not_in: [Int!]
  absorbDebtInteractionCount: Int
  absorbDebtInteractionCount_not: Int
  absorbDebtInteractionCount_gt: Int
  absorbDebtInteractionCount_lt: Int
  absorbDebtInteractionCount_gte: Int
  absorbDebtInteractionCount_lte: Int
  absorbDebtInteractionCount_in: [Int!]
  absorbDebtInteractionCount_not_in: [Int!]
  supplyCollateralInteractionCount: Int
  supplyCollateralInteractionCount_not: Int
  supplyCollateralInteractionCount_gt: Int
  supplyCollateralInteractionCount_lt: Int
  supplyCollateralInteractionCount_gte: Int
  supplyCollateralInteractionCount_lte: Int
  supplyCollateralInteractionCount_in: [Int!]
  supplyCollateralInteractionCount_not_in: [Int!]
  withdrawCollateralInteractionCount: Int
  withdrawCollateralInteractionCount_not: Int
  withdrawCollateralInteractionCount_gt: Int
  withdrawCollateralInteractionCount_lt: Int
  withdrawCollateralInteractionCount_gte: Int
  withdrawCollateralInteractionCount_lte: Int
  withdrawCollateralInteractionCount_in: [Int!]
  withdrawCollateralInteractionCount_not_in: [Int!]
  transferCollateralInteractionCount: Int
  transferCollateralInteractionCount_not: Int
  transferCollateralInteractionCount_gt: Int
  transferCollateralInteractionCount_lt: Int
  transferCollateralInteractionCount_gte: Int
  transferCollateralInteractionCount_lte: Int
  transferCollateralInteractionCount_in: [Int!]
  transferCollateralInteractionCount_not_in: [Int!]
  absorbCollateralInteractionCount: Int
  absorbCollateralInteractionCount_not: Int
  absorbCollateralInteractionCount_gt: Int
  absorbCollateralInteractionCount_lt: Int
  absorbCollateralInteractionCount_gte: Int
  absorbCollateralInteractionCount_lte: Int
  absorbCollateralInteractionCount_in: [Int!]
  absorbCollateralInteractionCount_not_in: [Int!]
  buyCollateralInteractionCount: Int
  buyCollateralInteractionCount_not: Int
  buyCollateralInteractionCount_gt: Int
  buyCollateralInteractionCount_lt: Int
  buyCollateralInteractionCount_gte: Int
  buyCollateralInteractionCount_lte: Int
  buyCollateralInteractionCount_in: [Int!]
  buyCollateralInteractionCount_not_in: [Int!]
  withdrawReservesInteractionCount: Int
  withdrawReservesInteractionCount_not: Int
  withdrawReservesInteractionCount_gt: Int
  withdrawReservesInteractionCount_lt: Int
  withdrawReservesInteractionCount_gte: Int
  withdrawReservesInteractionCount_lte: Int
  withdrawReservesInteractionCount_in: [Int!]
  withdrawReservesInteractionCount_not_in: [Int!]
  claimRewardsInteractionCount: Int
  claimRewardsInteractionCount_not: Int
  claimRewardsInteractionCount_gt: Int
  claimRewardsInteractionCount_lt: Int
  claimRewardsInteractionCount_gte: Int
  claimRewardsInteractionCount_lte: Int
  claimRewardsInteractionCount_in: [Int!]
  claimRewardsInteractionCount_not_in: [Int!]
  supplyBaseInteractions_: SupplyBaseInteraction_filter
  withdrawBaseInteractions_: WithdrawBaseInteraction_filter
  absorbDebtInteractions_: AbsorbDebtInteraction_filter
  supplyCollateralInteractions_: SupplyCollateralInteraction_filter
  withdrawCollateralInteractions_: WithdrawCollateralInteraction_filter
  transferCollateralInteractions_: TransferCollateralInteraction_filter
  absorbCollateralInteractions_: AbsorbCollateralInteraction_filter
  buyCollateralInteractions_: BuyCollateralInteraction_filter
  withdrawReservesInteractions_: WithdrawReservesInteraction_filter
  claimRewardsInteractions_: ClaimRewardsInteraction_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum Transaction_orderBy {
  id
  hash
  blockNumber
  timestamp
  from
  to
  gasLimit
  gasPrice
  gasUsed
  gasUsedUsd
  supplyBaseInteractionCount
  withdrawBaseInteractionCount
  absorbDebtInteractionCount
  supplyCollateralInteractionCount
  withdrawCollateralInteractionCount
  transferCollateralInteractionCount
  absorbCollateralInteractionCount
  buyCollateralInteractionCount
  withdrawReservesInteractionCount
  claimRewardsInteractionCount
  supplyBaseInteractions
  withdrawBaseInteractions
  absorbDebtInteractions
  supplyCollateralInteractions
  withdrawCollateralInteractions
  transferCollateralInteractions
  absorbCollateralInteractions
  buyCollateralInteractions
  withdrawReservesInteractions
  claimRewardsInteractions
}

type TransferCollateralInteraction {
  """
  Transaction ID + event log index
  """
  id: Bytes!
  """
  Transaction this interaction is part of
  """
  transaction: Transaction!
  """
  Market the interaction is with
  """
  market: Market!
  """
  Position the transfer is from
  """
  fromPosition: Position!
  """
  Position the transfer is to
  """
  toPosition: Position!
  """
  Asset being transferred
  """
  asset: CollateralToken!
  """
  Amount being transferred
  """
  amount: BigInt!
  """
  Amount being transferred in USD
  """
  amountUsd: BigDecimal!
}

input TransferCollateralInteraction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  fromPosition: String
  fromPosition_not: String
  fromPosition_gt: String
  fromPosition_lt: String
  fromPosition_gte: String
  fromPosition_lte: String
  fromPosition_in: [String!]
  fromPosition_not_in: [String!]
  fromPosition_contains: String
  fromPosition_contains_nocase: String
  fromPosition_not_contains: String
  fromPosition_not_contains_nocase: String
  fromPosition_starts_with: String
  fromPosition_starts_with_nocase: String
  fromPosition_not_starts_with: String
  fromPosition_not_starts_with_nocase: String
  fromPosition_ends_with: String
  fromPosition_ends_with_nocase: String
  fromPosition_not_ends_with: String
  fromPosition_not_ends_with_nocase: String
  fromPosition_: Position_filter
  toPosition: String
  toPosition_not: String
  toPosition_gt: String
  toPosition_lt: String
  toPosition_gte: String
  toPosition_lte: String
  toPosition_in: [String!]
  toPosition_not_in: [String!]
  toPosition_contains: String
  toPosition_contains_nocase: String
  toPosition_not_contains: String
  toPosition_not_contains_nocase: String
  toPosition_starts_with: String
  toPosition_starts_with_nocase: String
  toPosition_not_starts_with: String
  toPosition_not_starts_with_nocase: String
  toPosition_ends_with: String
  toPosition_ends_with_nocase: String
  toPosition_not_ends_with: String
  toPosition_not_ends_with_nocase: String
  toPosition_: Position_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: CollateralToken_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigDecimal
  amountUsd_not: BigDecimal
  amountUsd_gt: BigDecimal
  amountUsd_lt: BigDecimal
  amountUsd_gte: BigDecimal
  amountUsd_lte: BigDecimal
  amountUsd_in: [BigDecimal!]
  amountUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum TransferCollateralInteraction_orderBy {
  id
  transaction
  market
  fromPosition
  toPosition
  asset
  amount
  amountUsd
}

type Usage {
  """
  Name + time qualifier (ex: PROTOCOL_HOUR + hour)
  """
  id: Bytes!
  """
  Protocol the usage is for
  """
  protocol: Protocol!
  """
  Number of unique users
  """
  uniqueUsersCount: BigInt!
  """
  Number of interactions
  """
  interactionCount: BigInt!
  """
  Number of base supply interactions
  """
  supplyBaseCount: BigInt!
  """
  Number of base withdraw interactions
  """
  withdrawBaseCount: BigInt!
  """
  Number of liquidation interactions
  """
  liquidationCount: BigInt!
  """
  Number of supply collateral interactions
  """
  supplyCollateralCount: BigInt!
  """
  Number of withdraw collateral interactions
  """
  withdrawCollateralCount: BigInt!
  """
  Number of transfer collateral interactions
  """
  transferCollateralCount: BigInt!
}

input Usage_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Protocol_filter
  uniqueUsersCount: BigInt
  uniqueUsersCount_not: BigInt
  uniqueUsersCount_gt: BigInt
  uniqueUsersCount_lt: BigInt
  uniqueUsersCount_gte: BigInt
  uniqueUsersCount_lte: BigInt
  uniqueUsersCount_in: [BigInt!]
  uniqueUsersCount_not_in: [BigInt!]
  interactionCount: BigInt
  interactionCount_not: BigInt
  interactionCount_gt: BigInt
  interactionCount_lt: BigInt
  interactionCount_gte: BigInt
  interactionCount_lte: BigInt
  interactionCount_in: [BigInt!]
  interactionCount_not_in: [BigInt!]
  supplyBaseCount: BigInt
  supplyBaseCount_not: BigInt
  supplyBaseCount_gt: BigInt
  supplyBaseCount_lt: BigInt
  supplyBaseCount_gte: BigInt
  supplyBaseCount_lte: BigInt
  supplyBaseCount_in: [BigInt!]
  supplyBaseCount_not_in: [BigInt!]
  withdrawBaseCount: BigInt
  withdrawBaseCount_not: BigInt
  withdrawBaseCount_gt: BigInt
  withdrawBaseCount_lt: BigInt
  withdrawBaseCount_gte: BigInt
  withdrawBaseCount_lte: BigInt
  withdrawBaseCount_in: [BigInt!]
  withdrawBaseCount_not_in: [BigInt!]
  liquidationCount: BigInt
  liquidationCount_not: BigInt
  liquidationCount_gt: BigInt
  liquidationCount_lt: BigInt
  liquidationCount_gte: BigInt
  liquidationCount_lte: BigInt
  liquidationCount_in: [BigInt!]
  liquidationCount_not_in: [BigInt!]
  supplyCollateralCount: BigInt
  supplyCollateralCount_not: BigInt
  supplyCollateralCount_gt: BigInt
  supplyCollateralCount_lt: BigInt
  supplyCollateralCount_gte: BigInt
  supplyCollateralCount_lte: BigInt
  supplyCollateralCount_in: [BigInt!]
  supplyCollateralCount_not_in: [BigInt!]
  withdrawCollateralCount: BigInt
  withdrawCollateralCount_not: BigInt
  withdrawCollateralCount_gt: BigInt
  withdrawCollateralCount_lt: BigInt
  withdrawCollateralCount_gte: BigInt
  withdrawCollateralCount_lte: BigInt
  withdrawCollateralCount_in: [BigInt!]
  withdrawCollateralCount_not_in: [BigInt!]
  transferCollateralCount: BigInt
  transferCollateralCount_not: BigInt
  transferCollateralCount_gt: BigInt
  transferCollateralCount_lt: BigInt
  transferCollateralCount_gte: BigInt
  transferCollateralCount_lte: BigInt
  transferCollateralCount_in: [BigInt!]
  transferCollateralCount_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum Usage_orderBy {
  id
  protocol
  uniqueUsersCount
  interactionCount
  supplyBaseCount
  withdrawBaseCount
  liquidationCount
  supplyCollateralCount
  withdrawCollateralCount
  transferCollateralCount
}

type WeeklyMarketAccounting {
  """
  Market ID + week
  """
  id: Bytes!
  """
  Weeks since unix epoch
  """
  week: BigInt!
  """
  Seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Market the accounting if for
  """
  market: Market!
  """
  Accounting snapshot
  """
  accounting: MarketAccounting!
}

input WeeklyMarketAccounting_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  week: BigInt
  week_not: BigInt
  week_gt: BigInt
  week_lt: BigInt
  week_gte: BigInt
  week_lte: BigInt
  week_in: [BigInt!]
  week_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  accounting: String
  accounting_not: String
  accounting_gt: String
  accounting_lt: String
  accounting_gte: String
  accounting_lte: String
  accounting_in: [String!]
  accounting_not_in: [String!]
  accounting_contains: String
  accounting_contains_nocase: String
  accounting_not_contains: String
  accounting_not_contains_nocase: String
  accounting_starts_with: String
  accounting_starts_with_nocase: String
  accounting_not_starts_with: String
  accounting_not_starts_with_nocase: String
  accounting_ends_with: String
  accounting_ends_with_nocase: String
  accounting_not_ends_with: String
  accounting_not_ends_with_nocase: String
  accounting_: MarketAccounting_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum WeeklyMarketAccounting_orderBy {
  id
  week
  timestamp
  market
  accounting
}

type WeeklyProtocolAccounting {
  """
  Week
  """
  id: Bytes!
  """
  Week since unix epoch
  """
  week: BigInt!
  """
  Seconds since unix epoch
  """
  timestamp: BigInt!
  """
  Protocol the accounting if for
  """
  protocol: Protocol!
  """
  Accounting snapshot
  """
  accounting: ProtocolAccounting!
}

input WeeklyProtocolAccounting_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  week: BigInt
  week_not: BigInt
  week_gt: BigInt
  week_lt: BigInt
  week_gte: BigInt
  week_lte: BigInt
  week_in: [BigInt!]
  week_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Protocol_filter
  accounting: String
  accounting_not: String
  accounting_gt: String
  accounting_lt: String
  accounting_gte: String
  accounting_lte: String
  accounting_in: [String!]
  accounting_not_in: [String!]
  accounting_contains: String
  accounting_contains_nocase: String
  accounting_not_contains: String
  accounting_not_contains_nocase: String
  accounting_starts_with: String
  accounting_starts_with_nocase: String
  accounting_not_starts_with: String
  accounting_not_starts_with_nocase: String
  accounting_ends_with: String
  accounting_ends_with_nocase: String
  accounting_not_ends_with: String
  accounting_not_ends_with_nocase: String
  accounting_: ProtocolAccounting_filter
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum WeeklyProtocolAccounting_orderBy {
  id
  week
  timestamp
  protocol
  accounting
}

type WithdrawBaseInteraction {
  """
  Transaction ID + event log index
  """
  id: Bytes!
  """
  Transaction this interaction is part of
  """
  transaction: Transaction!
  """
  Market the interaction is with
  """
  market: Market!
  """
  Position the interaction is with
  """
  position: Position!
  """
  Where the funds are being withdrawn to
  """
  destination: Bytes!
  """
  Asset being withdrawn
  """
  asset: BaseToken!
  """
  Amount being withdrawn
  """
  amount: BigInt!
  """
  Amount being withdrawn in USD
  """
  amountUsd: BigDecimal!
}

input WithdrawBaseInteraction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  destination: Bytes
  destination_not: Bytes
  destination_in: [Bytes!]
  destination_not_in: [Bytes!]
  destination_contains: Bytes
  destination_not_contains: Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: BaseToken_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigDecimal
  amountUsd_not: BigDecimal
  amountUsd_gt: BigDecimal
  amountUsd_lt: BigDecimal
  amountUsd_gte: BigDecimal
  amountUsd_lte: BigDecimal
  amountUsd_in: [BigDecimal!]
  amountUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum WithdrawBaseInteraction_orderBy {
  id
  transaction
  market
  position
  destination
  asset
  amount
  amountUsd
}

type WithdrawCollateralInteraction {
  """
  Transaction ID + event log index
  """
  id: Bytes!
  """
  Transaction this interaction is part of
  """
  transaction: Transaction!
  """
  Market the interaction is with
  """
  market: Market!
  """
  Position the interaction is with
  """
  position: Position!
  """
  Where the assets are being withdrawn to
  """
  destination: Bytes!
  """
  Asset being withdrawn
  """
  asset: CollateralToken!
  """
  Asset being withdrawn
  """
  amount: BigInt!
  """
  Asset being withdrawn in USD
  """
  amountUsd: BigDecimal!
}

input WithdrawCollateralInteraction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  destination: Bytes
  destination_not: Bytes
  destination_in: [Bytes!]
  destination_not_in: [Bytes!]
  destination_contains: Bytes
  destination_not_contains: Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: CollateralToken_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigDecimal
  amountUsd_not: BigDecimal
  amountUsd_gt: BigDecimal
  amountUsd_lt: BigDecimal
  amountUsd_gte: BigDecimal
  amountUsd_lte: BigDecimal
  amountUsd_in: [BigDecimal!]
  amountUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum WithdrawCollateralInteraction_orderBy {
  id
  transaction
  market
  position
  destination
  asset
  amount
  amountUsd
}

type WithdrawReservesInteraction {
  """
  Transaction ID + event log index
  """
  id: Bytes!
  """
  Transaction this interaction is part of
  """
  transaction: Transaction!
  """
  Market the interaction is with
  """
  market: Market!
  """
  Destination of the reserves
  """
  destination: Bytes!
  """
  Amount of base reserves being withdrawn
  """
  amount: BigInt!
  """
  Amount of base reserves being withdrawn in USD
  """
  amountUsd: BigDecimal!
}

input WithdrawReservesInteraction_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  destination: Bytes
  destination_not: Bytes
  destination_in: [Bytes!]
  destination_not_in: [Bytes!]
  destination_contains: Bytes
  destination_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigDecimal
  amountUsd_not: BigDecimal
  amountUsd_gt: BigDecimal
  amountUsd_lt: BigDecimal
  amountUsd_gte: BigDecimal
  amountUsd_lte: BigDecimal
  amountUsd_in: [BigDecimal!]
  amountUsd_not_in: [BigDecimal!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum WithdrawReservesInteraction_orderBy {
  id
  transaction
  market
  destination
  amount
  amountUsd
}

type _ActiveAccount {
  """
  Address + usecase specific metadata, this is just a helper for tracking overall usage
  """
  id: Bytes!
}

input _ActiveAccount_filter {
  id: Bytes
  id_not: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
}

enum _ActiveAccount_orderBy {
  id
}

type _Block_ {
  """
  The hash of the block
  """
  hash: Bytes
  """
  The block number
  """
  number: Int!
  """
  Integer representation of the timestamp stored in blocks for the chain
  """
  timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  """
  block: _Block_!
  """
  The deployment ID
  """
  deployment: String!
  """
  If `true`, the subgraph encountered indexing errors at some past block
  """
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """
  Data will be returned even if the subgraph has indexing errors
  """
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
